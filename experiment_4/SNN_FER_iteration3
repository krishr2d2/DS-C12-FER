{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SNN_FER","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNMThecxqowl2jAZAYZtYw5"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"KR7PsFJKRvGO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658241380863,"user_tz":-330,"elapsed":23634,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"ce5ad56f-50c1-483c-a02d-3c31b8f498fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import cv2\n","import numpy as np\n","\n","train_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/train/farenback_of\"\n","# train_files = os.listdir(train_path)\n","# print (len(train_files))\n","\n","train_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/train_aug.csv\")\n","train_csv[\"of_img\"] = train_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","train_csv = train_csv[train_csv[\"target\"].isin([1,5,7])].reset_index(drop=True)\n","print (train_csv.shape)\n","\n","train_X = None\n","train_y = None\n","first_round = True\n","for i, row in train_csv.iterrows():\n","  img = cv2.imread(os.path.join(train_path, row[\"of_img\"]))\n","  img = cv2.resize(img, (100, 100))\n","  target = row[\"target\"]\n","  if target == 1 :\n","    target = 0\n","  elif target == 5:\n","    target = 1\n","  else :\n","    target = 2\n","\n","  if first_round: \n","    train_X = [img]\n","    train_y = [target]\n","    first_round = False\n","  else:\n","    train_X = np.append(train_X,[img], axis=0)\n","    train_y = np.append(train_y, [target], axis=0)\n","\n","del train_csv, train_path\n","train_X.shape, train_y.shape"],"metadata":{"id":"6biZEJN6RwyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658241741663,"user_tz":-330,"elapsed":3920,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"3195c293-d93b-4f77-ea3d-2d2455a18b2f"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["(227, 4)\n"]},{"output_type":"execute_result","data":{"text/plain":["((227, 100, 100, 3), (227,))"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["np.unique(train_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0D9eCwX85gXp","executionInfo":{"status":"ok","timestamp":1658241745388,"user_tz":-330,"elapsed":747,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"a89b3391-6d23-4dec-9668-f3385ae639b7"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2])"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import random\n","%matplotlib inline \n","\n","## Check the image data\n","plt.imshow(train_X[random.randint(0,200)])\n","plt.show()\n","\n","## check the target data\n","print (np.unique(train_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"gBt9ck-7qnsJ","executionInfo":{"status":"ok","timestamp":1658241751917,"user_tz":-330,"elapsed":605,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"bf0ca4d8-1b34-4c70-8efd-cf39134c0c85"},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[0 1 2]\n"]}]},{"cell_type":"code","source":["# %%writefile config.py\n","\n","# import the necessary packages\n","import os\n","# specify the shape of the inputs for our network\n","IMG_SHAPE = (100, 100, 3)\n","# specify the batch size and number of epochs\n","BATCH_SIZE = 20\n","EPOCHS = 100\n","\n","# define the path to the base output directory\n","BASE_OUTPUT = \"output\"\n","# use the base output path to derive the path to the serialized\n","# model along with training history plot\n","MODEL_PATH = os.path.sep.join([BASE_OUTPUT, \"siamese_model\"])\n","PLOT_PATH = os.path.sep.join([BASE_OUTPUT, \"plot.png\"])"],"metadata":{"id":"5BNoAelmqea0","executionInfo":{"status":"ok","timestamp":1658241496564,"user_tz":-330,"elapsed":329,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# %%writefile utils.py\n","\n","# import the necessary packages\n","import tensorflow.keras.backend as K\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import tensorflow as tf\n","\n","def make_pairs(images, labels):\n","\t# initialize two empty lists to hold the (image, image) pairs and\n","\t# labels to indicate if a pair is positive or negative\n","\tpairImages = []\n","\tpairLabels = []\n","\t# calculate the total number of classes present in the dataset\n","\t# and then build a list of indexes for each class label that\n","\t# provides the indexes for all examples with a given label\n","\tnumClasses = len(np.unique(labels))\n","\tidx = [np.where(labels == i)[0] for i in range(0, numClasses)]\n","\t# loop over all images\n","\tfor idxA in range(len(images)):\n","\t\t# grab the current image and label belonging to the current\n","\t\t# iteration\n","\t\tcurrentImage = images[idxA]\n","\t\tlabel = labels[idxA]\n","\t\t# randomly pick an image that belongs to the *same* class\n","\t\t# label\n","\t\tidxB = np.random.choice(idx[label])\n","\t\tposImage = images[idxB]\n","\t\t# prepare a positive pair and update the images and labels\n","\t\t# lists, respectively\n","\t\tpairImages.append([currentImage, posImage])\n","\t\tpairLabels.append([1])\n","\t\t# grab the indices for each of the class labels *not* equal to\n","\t\t# the current label and randomly pick an image corresponding\n","\t\t# to a label *not* equal to the current label\n","\t\tnegIdx = np.where(labels != label)[0]\n","\t\tnegImage = images[np.random.choice(negIdx)]\n","\t\t# prepare a negative pair of images and update our lists\n","\t\tpairImages.append([currentImage, negImage])\n","\t\tpairLabels.append([0])\n","\t# return a 2-tuple of our image pairs and labels\n","\treturn (np.array(pairImages), np.array(pairLabels))\n","\n","\n","def euclidean_distance(vectors):\n","\t# unpack the vectors into separate lists\n","\t(featsA, featsB) = vectors\n","\t# compute the sum of squared distances between the vectors\n","\tsumSquared = K.sum(K.square(featsA - featsB), axis=1,\n","\t\tkeepdims=True)\n","\t# return the euclidean distance between the vectors\n","\treturn K.sqrt(K.maximum(sumSquared, K.epsilon()))\n","\n","\n","def contrastive_loss(y, preds, margin=1):\n","\t# explicitly cast the true class label data type to the predicted\n","\t# class label data type (otherwise we run the risk of having two\n","\t# separate data types, causing TensorFlow to error out)\n","\ty = tf.cast(y, preds.dtype)\n","\t# calculate the contrastive loss between the true labels and\n","\t# the predicted labels\n","\tsquaredPreds = K.square(preds)\n","\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n","\tloss = K.mean(y * squaredMargin + (1 - y) * squaredPreds)\n","\t# return the computed contrastive loss to the calling function\n","\treturn loss\n","\n","def plot_training(H, plotPath):\n","\t# construct a plot that plots and saves the training history\n","\tplt.style.use(\"ggplot\")\n","\tplt.figure()\n","\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n","\tplt.plot(H.history[\"val_loss\"], label=\"val_loss\")\n","\tplt.plot(H.history[\"accuracy\"], label=\"train_acc\")\n","\tplt.plot(H.history[\"val_accuracy\"], label=\"val_acc\")\n","\tplt.title(\"Training Loss and Accuracy\")\n","\tplt.xlabel(\"Epoch #\")\n","\tplt.ylabel(\"Loss/Accuracy\")\n","\tplt.legend(loc=\"lower left\")\n","\tplt.savefig(plotPath)"],"metadata":{"id":"mbTKhwWNrc76","executionInfo":{"status":"ok","timestamp":1658241508067,"user_tz":-330,"elapsed":368,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Flatten\n","from tensorflow.keras.layers import MaxPooling2D\n","# from tensorflow.keras.applications import VGG16\n","\n","def build_siamese_model(inputShape, embeddingDim=48):\n","\n","\t# # create the base pre-trained model\n","\t# pretrained_model = VGG16(\n","\t# \t\t\t\t\t\t\t\t\tinclude_top=False,\n","\t# \t\t\t\t\t\t\t\t\tinput_shape=inputShape,\n","\t# \t\t\t\t\t\t\t\t\tpooling='avg',\n","\t# \t\t\t\t\t\t\t\t\tclasses=7,\n","\t# \t\t\t\t\t\t\t\t\tweights='imagenet')\n"," \n"," # first: train only the top layers (which were randomly initialized)\n","\t# i.e. freeze all convolutional \n","\t# for layer in pretrained_model.layers:\n","\t# \tlayer.trainable = False\n","\n","\t# # specify the inputs for the feature extractor network\n","\tinputs = Input(inputShape)\n","\t# define the first set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(inputs)\n","\tx = MaxPooling2D(pool_size=(2, 2))(x)\n","\tx = Dropout(0.3)(x)\n","\t# second set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\tx = MaxPooling2D(pool_size=2)(x)\n","\tx = Dropout(0.3)(x)\n","\t# # third set of CONV => RELU => POOL => DROPOUT layers\n","\t# x = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\t# x = MaxPooling2D(pool_size=2)(x)\n","\t# x = Dropout(0.3)(x)\n","\n","\n","\t# prepare the final outputs\n","\n","\tx = Flatten()(x) \n","\t# x = GlobalAveragePooling2D()(x)\n","\tx = Dense(16, activation=\"relu\")(x)\n","\tx = Dropout(0.2)(x)\n","\t# x = Dense(16, activation=\"relu\")(x)\n","\t# x = Dropout(0.2)(x)\n","\t# x = Dense(32, activation=\"relu\")(x)\n","\t# x = Dropout(0.2)(x)\n","\toutputs = Dense(embeddingDim, activation=\"tanh\")(x)\n","\t# build the model\n","\tmodel = Model(inputs, outputs)\n","\t\n","\t# return the model to the calling function\n","\treturn model"],"metadata":{"id":"FvnM8aLec_uB","executionInfo":{"status":"ok","timestamp":1658241513186,"user_tz":-330,"elapsed":5,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","# from siamese_network import build_siamese_model\n","# import config\n","# import utils\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Lambda\n","import numpy as np\n","\n","\n","# convert values to 0-1 range\n","X = train_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTrain, labelTrain) = make_pairs(X, train_y)\n","# (pairTest, labelTest) = utils.make_pairs(testX, testY)\n","\n","# del train_X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rNErRi6rrpok","executionInfo":{"status":"ok","timestamp":1658241769565,"user_tz":-330,"elapsed":416,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"1dc64f31-7c3a-4259-d1f3-c95e4e59c046"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n"]}]},{"cell_type":"code","source":["np.sum(labelTrain)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"N4Dnwdwj1y_s","executionInfo":{"status":"ok","timestamp":1658241812304,"user_tz":-330,"elapsed":457,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"cc949f8b-fd9a-4a77-f35a-1200cdd23be9"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["227"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import RMSprop\n","\n","# configure the siamese network\n","print(\"[INFO] building siamese network...\")\n","imgA = Input(shape=IMG_SHAPE)\n","imgB = Input(shape=IMG_SHAPE)\n","featureExtractor = build_siamese_model(IMG_SHAPE, 64)\n","featsA = featureExtractor(imgA)\n","featsB = featureExtractor(imgB)\n","\n","# finally, construct the siamese network\n","distance = Lambda(euclidean_distance)([featsA, featsB])\n","# outputs = Dense(16, activation=\"relu\")(distance)\n","outputs = Dense(1, activation=\"sigmoid\")(distance)\n","model = Model(inputs=[imgA, imgB], outputs=outputs, name=\"SNN_model\")\n","\n","# compile the model\n","print(\"[INFO] compiling model...\")\n","model.compile(loss=contrastive_loss, \n","              optimizer=\"rmsprop\", \n","              metrics=[\"accuracy\"])\n","# model.compile(loss=contrastive_loss, optimizer=\"adam\", metrics=[\"accuracy\"])\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSZTxKWptro8","executionInfo":{"status":"ok","timestamp":1658241826605,"user_tz":-330,"elapsed":606,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"ac7e7de5-f7f7-4db3-bf2c-f11d290e5d36"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] building siamese network...\n","[INFO] compiling model...\n","Model: \"SNN_model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 100, 100, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," input_2 (InputLayer)           [(None, 100, 100, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," model (Functional)             (None, 64)           325648      ['input_1[0][0]',                \n","                                                                  'input_2[0][0]']                \n","                                                                                                  \n"," lambda (Lambda)                (None, 1)            0           ['model[0][0]',                  \n","                                                                  'model[1][0]']                  \n","                                                                                                  \n"," dense_2 (Dense)                (None, 1)            2           ['lambda[0][0]']                 \n","                                                                                                  \n","==================================================================================================\n","Total params: 325,650\n","Trainable params: 325,650\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# train the model\n","print(\"[INFO] training model...\")\n","history = model.fit(\n","\t[pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:],\n","\tvalidation_split=0.20,\n","\tbatch_size=BATCH_SIZE, \n","\tepochs=EPOCHS)\n","\n","# serialize the model to disk\n","print(\"[INFO] saving siamese model...\")\n","model.save(MODEL_PATH)\n","\n","# plot the training history\n","print(\"[INFO] plotting training history...\")\n","plot_training(history, PLOT_PATH)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"jBtuHRRzs8yx","executionInfo":{"status":"ok","timestamp":1658242637452,"user_tz":-330,"elapsed":806203,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"9774b303-6a66-4e6b-8d80-e71c9b5603a0"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] training model...\n","Epoch 1/100\n","19/19 [==============================] - 9s 404ms/step - loss: 0.2437 - accuracy: 0.4986 - val_loss: 0.2286 - val_accuracy: 0.5385\n","Epoch 2/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.2273 - accuracy: 0.5537 - val_loss: 0.2075 - val_accuracy: 0.5385\n","Epoch 3/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.2159 - accuracy: 0.5950 - val_loss: 0.2008 - val_accuracy: 0.5385\n","Epoch 4/100\n","19/19 [==============================] - 7s 391ms/step - loss: 0.2012 - accuracy: 0.6198 - val_loss: 0.1774 - val_accuracy: 0.5604\n","Epoch 5/100\n","19/19 [==============================] - 7s 355ms/step - loss: 0.1941 - accuracy: 0.6336 - val_loss: 0.1938 - val_accuracy: 0.5495\n","Epoch 6/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.1805 - accuracy: 0.6997 - val_loss: 0.1707 - val_accuracy: 0.5934\n","Epoch 7/100\n","19/19 [==============================] - 7s 359ms/step - loss: 0.1815 - accuracy: 0.6970 - val_loss: 0.1558 - val_accuracy: 0.7692\n","Epoch 8/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.1740 - accuracy: 0.7300 - val_loss: 0.1603 - val_accuracy: 0.7363\n","Epoch 9/100\n","19/19 [==============================] - 7s 358ms/step - loss: 0.1704 - accuracy: 0.7328 - val_loss: 0.1467 - val_accuracy: 0.8462\n","Epoch 10/100\n","19/19 [==============================] - 7s 358ms/step - loss: 0.1589 - accuracy: 0.8044 - val_loss: 0.1376 - val_accuracy: 0.8901\n","Epoch 11/100\n","19/19 [==============================] - 7s 358ms/step - loss: 0.1555 - accuracy: 0.7769 - val_loss: 0.1316 - val_accuracy: 0.9341\n","Epoch 12/100\n","19/19 [==============================] - 7s 360ms/step - loss: 0.1498 - accuracy: 0.8127 - val_loss: 0.1283 - val_accuracy: 0.9451\n","Epoch 13/100\n","19/19 [==============================] - 7s 359ms/step - loss: 0.1465 - accuracy: 0.8182 - val_loss: 0.1227 - val_accuracy: 0.9560\n","Epoch 14/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.1448 - accuracy: 0.8264 - val_loss: 0.1212 - val_accuracy: 0.9451\n","Epoch 15/100\n","19/19 [==============================] - 7s 360ms/step - loss: 0.1383 - accuracy: 0.8099 - val_loss: 0.1171 - val_accuracy: 0.9780\n","Epoch 16/100\n","19/19 [==============================] - 7s 361ms/step - loss: 0.1293 - accuracy: 0.8650 - val_loss: 0.1128 - val_accuracy: 0.9780\n","Epoch 17/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.1315 - accuracy: 0.8567 - val_loss: 0.1111 - val_accuracy: 0.9780\n","Epoch 18/100\n","19/19 [==============================] - 7s 359ms/step - loss: 0.1222 - accuracy: 0.9174 - val_loss: 0.1153 - val_accuracy: 0.9451\n","Epoch 19/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.1235 - accuracy: 0.9339 - val_loss: 0.1059 - val_accuracy: 0.9780\n","Epoch 20/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.1139 - accuracy: 0.9587 - val_loss: 0.1042 - val_accuracy: 0.9780\n","Epoch 21/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.1110 - accuracy: 0.9697 - val_loss: 0.1018 - val_accuracy: 0.9780\n","Epoch 22/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.1087 - accuracy: 0.9725 - val_loss: 0.0999 - val_accuracy: 0.9780\n","Epoch 23/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.1128 - accuracy: 0.9504 - val_loss: 0.0982 - val_accuracy: 0.9780\n","Epoch 24/100\n","19/19 [==============================] - 7s 359ms/step - loss: 0.1032 - accuracy: 0.9697 - val_loss: 0.0971 - val_accuracy: 0.9780\n","Epoch 25/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.1065 - accuracy: 0.9587 - val_loss: 0.0946 - val_accuracy: 0.9780\n","Epoch 26/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.1056 - accuracy: 0.9587 - val_loss: 0.0936 - val_accuracy: 0.9780\n","Epoch 27/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.0969 - accuracy: 0.9697 - val_loss: 0.0922 - val_accuracy: 0.9780\n","Epoch 28/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.1020 - accuracy: 0.9559 - val_loss: 0.0902 - val_accuracy: 0.9780\n","Epoch 29/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.0874 - accuracy: 0.9807 - val_loss: 0.0884 - val_accuracy: 0.9780\n","Epoch 30/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0906 - accuracy: 0.9614 - val_loss: 0.0869 - val_accuracy: 0.9780\n","Epoch 31/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0884 - accuracy: 0.9669 - val_loss: 0.0852 - val_accuracy: 0.9780\n","Epoch 32/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.0894 - accuracy: 0.9642 - val_loss: 0.0841 - val_accuracy: 0.9780\n","Epoch 33/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.0899 - accuracy: 0.9642 - val_loss: 0.0826 - val_accuracy: 0.9780\n","Epoch 34/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.0879 - accuracy: 0.9642 - val_loss: 0.0811 - val_accuracy: 0.9780\n","Epoch 35/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0820 - accuracy: 0.9752 - val_loss: 0.0796 - val_accuracy: 0.9780\n","Epoch 36/100\n","19/19 [==============================] - 7s 357ms/step - loss: 0.0789 - accuracy: 0.9725 - val_loss: 0.0784 - val_accuracy: 0.9780\n","Epoch 37/100\n","19/19 [==============================] - 7s 355ms/step - loss: 0.0821 - accuracy: 0.9614 - val_loss: 0.0770 - val_accuracy: 0.9780\n","Epoch 38/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.0721 - accuracy: 0.9835 - val_loss: 0.0758 - val_accuracy: 0.9780\n","Epoch 39/100\n","19/19 [==============================] - 12s 643ms/step - loss: 0.0752 - accuracy: 0.9725 - val_loss: 0.0748 - val_accuracy: 0.9780\n","Epoch 40/100\n","19/19 [==============================] - 7s 358ms/step - loss: 0.0752 - accuracy: 0.9697 - val_loss: 0.0737 - val_accuracy: 0.9780\n","Epoch 41/100\n","19/19 [==============================] - 11s 580ms/step - loss: 0.0812 - accuracy: 0.9642 - val_loss: 0.0721 - val_accuracy: 0.9780\n","Epoch 42/100\n","19/19 [==============================] - 13s 675ms/step - loss: 0.0734 - accuracy: 0.9725 - val_loss: 0.0707 - val_accuracy: 0.9780\n","Epoch 43/100\n","19/19 [==============================] - 9s 481ms/step - loss: 0.0748 - accuracy: 0.9669 - val_loss: 0.0697 - val_accuracy: 0.9780\n","Epoch 44/100\n","19/19 [==============================] - 8s 396ms/step - loss: 0.0779 - accuracy: 0.9614 - val_loss: 0.0714 - val_accuracy: 0.9780\n","Epoch 45/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0736 - accuracy: 0.9697 - val_loss: 0.0673 - val_accuracy: 0.9780\n","Epoch 46/100\n","19/19 [==============================] - 11s 577ms/step - loss: 0.0709 - accuracy: 0.9697 - val_loss: 0.0664 - val_accuracy: 0.9780\n","Epoch 47/100\n","19/19 [==============================] - 10s 540ms/step - loss: 0.0718 - accuracy: 0.9669 - val_loss: 0.0651 - val_accuracy: 0.9780\n","Epoch 48/100\n","19/19 [==============================] - 10s 533ms/step - loss: 0.0653 - accuracy: 0.9725 - val_loss: 0.0655 - val_accuracy: 0.9780\n","Epoch 49/100\n","19/19 [==============================] - 10s 532ms/step - loss: 0.0717 - accuracy: 0.9669 - val_loss: 0.0714 - val_accuracy: 0.9451\n","Epoch 50/100\n","19/19 [==============================] - 11s 570ms/step - loss: 0.0659 - accuracy: 0.9669 - val_loss: 0.0627 - val_accuracy: 0.9780\n","Epoch 51/100\n","19/19 [==============================] - 11s 558ms/step - loss: 0.0659 - accuracy: 0.9725 - val_loss: 0.0624 - val_accuracy: 0.9780\n","Epoch 52/100\n","19/19 [==============================] - 10s 520ms/step - loss: 0.0674 - accuracy: 0.9669 - val_loss: 0.0611 - val_accuracy: 0.9780\n","Epoch 53/100\n","19/19 [==============================] - 10s 549ms/step - loss: 0.0589 - accuracy: 0.9780 - val_loss: 0.0595 - val_accuracy: 0.9780\n","Epoch 54/100\n","19/19 [==============================] - 11s 557ms/step - loss: 0.0685 - accuracy: 0.9614 - val_loss: 0.0585 - val_accuracy: 0.9780\n","Epoch 55/100\n","19/19 [==============================] - 10s 514ms/step - loss: 0.0650 - accuracy: 0.9669 - val_loss: 0.0575 - val_accuracy: 0.9780\n","Epoch 56/100\n","19/19 [==============================] - 7s 352ms/step - loss: 0.0675 - accuracy: 0.9559 - val_loss: 0.0588 - val_accuracy: 0.9780\n","Epoch 57/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0611 - accuracy: 0.9697 - val_loss: 0.0570 - val_accuracy: 0.9780\n","Epoch 58/100\n","19/19 [==============================] - 7s 349ms/step - loss: 0.0563 - accuracy: 0.9780 - val_loss: 0.0596 - val_accuracy: 0.9780\n","Epoch 59/100\n","19/19 [==============================] - 7s 356ms/step - loss: 0.0609 - accuracy: 0.9642 - val_loss: 0.0597 - val_accuracy: 0.9780\n","Epoch 60/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0545 - accuracy: 0.9752 - val_loss: 0.0596 - val_accuracy: 0.9670\n","Epoch 61/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0513 - accuracy: 0.9780 - val_loss: 0.0532 - val_accuracy: 0.9780\n","Epoch 62/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0533 - accuracy: 0.9752 - val_loss: 0.0774 - val_accuracy: 0.9121\n","Epoch 63/100\n","19/19 [==============================] - 7s 352ms/step - loss: 0.0575 - accuracy: 0.9642 - val_loss: 0.0555 - val_accuracy: 0.9780\n","Epoch 64/100\n","19/19 [==============================] - 7s 384ms/step - loss: 0.0602 - accuracy: 0.9587 - val_loss: 0.0507 - val_accuracy: 0.9780\n","Epoch 65/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0633 - accuracy: 0.9559 - val_loss: 0.0533 - val_accuracy: 0.9780\n","Epoch 66/100\n","19/19 [==============================] - 7s 352ms/step - loss: 0.0514 - accuracy: 0.9725 - val_loss: 0.0581 - val_accuracy: 0.9560\n","Epoch 67/100\n","19/19 [==============================] - 7s 350ms/step - loss: 0.0477 - accuracy: 0.9780 - val_loss: 0.0620 - val_accuracy: 0.9451\n","Epoch 68/100\n","19/19 [==============================] - 7s 352ms/step - loss: 0.0539 - accuracy: 0.9642 - val_loss: 0.0483 - val_accuracy: 0.9780\n","Epoch 69/100\n","19/19 [==============================] - 7s 387ms/step - loss: 0.0485 - accuracy: 0.9725 - val_loss: 0.0482 - val_accuracy: 0.9780\n","Epoch 70/100\n","19/19 [==============================] - 7s 349ms/step - loss: 0.0576 - accuracy: 0.9587 - val_loss: 0.0480 - val_accuracy: 0.9780\n","Epoch 71/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0592 - accuracy: 0.9532 - val_loss: 0.0452 - val_accuracy: 0.9780\n","Epoch 72/100\n","19/19 [==============================] - 7s 348ms/step - loss: 0.0549 - accuracy: 0.9642 - val_loss: 0.0564 - val_accuracy: 0.9670\n","Epoch 73/100\n","19/19 [==============================] - 7s 347ms/step - loss: 0.0431 - accuracy: 0.9780 - val_loss: 0.0468 - val_accuracy: 0.9670\n","Epoch 74/100\n","19/19 [==============================] - 7s 349ms/step - loss: 0.0396 - accuracy: 0.9807 - val_loss: 0.0452 - val_accuracy: 0.9780\n","Epoch 75/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0516 - accuracy: 0.9669 - val_loss: 0.0437 - val_accuracy: 0.9780\n","Epoch 76/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0423 - accuracy: 0.9780 - val_loss: 0.0436 - val_accuracy: 0.9780\n","Epoch 77/100\n","19/19 [==============================] - 11s 610ms/step - loss: 0.0438 - accuracy: 0.9725 - val_loss: 0.0441 - val_accuracy: 0.9670\n","Epoch 78/100\n","19/19 [==============================] - 12s 613ms/step - loss: 0.0459 - accuracy: 0.9697 - val_loss: 0.0422 - val_accuracy: 0.9780\n","Epoch 79/100\n","19/19 [==============================] - 10s 529ms/step - loss: 0.0431 - accuracy: 0.9725 - val_loss: 0.0427 - val_accuracy: 0.9780\n","Epoch 80/100\n","19/19 [==============================] - 7s 349ms/step - loss: 0.0465 - accuracy: 0.9669 - val_loss: 0.0545 - val_accuracy: 0.9560\n","Epoch 81/100\n","19/19 [==============================] - 7s 352ms/step - loss: 0.0527 - accuracy: 0.9587 - val_loss: 0.0402 - val_accuracy: 0.9780\n","Epoch 82/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0405 - accuracy: 0.9752 - val_loss: 0.0411 - val_accuracy: 0.9780\n","Epoch 83/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0446 - accuracy: 0.9669 - val_loss: 0.0384 - val_accuracy: 0.9780\n","Epoch 84/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0367 - accuracy: 0.9780 - val_loss: 0.0385 - val_accuracy: 0.9780\n","Epoch 85/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0365 - accuracy: 0.9780 - val_loss: 0.0409 - val_accuracy: 0.9780\n","Epoch 86/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0444 - accuracy: 0.9669 - val_loss: 0.0589 - val_accuracy: 0.9560\n","Epoch 87/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0416 - accuracy: 0.9697 - val_loss: 0.0413 - val_accuracy: 0.9780\n","Epoch 88/100\n","19/19 [==============================] - 7s 350ms/step - loss: 0.0475 - accuracy: 0.9614 - val_loss: 0.0462 - val_accuracy: 0.9670\n","Epoch 89/100\n","19/19 [==============================] - 9s 483ms/step - loss: 0.0401 - accuracy: 0.9725 - val_loss: 0.0357 - val_accuracy: 0.9780\n","Epoch 90/100\n","19/19 [==============================] - 10s 508ms/step - loss: 0.0373 - accuracy: 0.9752 - val_loss: 0.0356 - val_accuracy: 0.9780\n","Epoch 91/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0464 - accuracy: 0.9587 - val_loss: 0.0455 - val_accuracy: 0.9670\n","Epoch 92/100\n","19/19 [==============================] - 8s 405ms/step - loss: 0.0417 - accuracy: 0.9697 - val_loss: 0.0341 - val_accuracy: 0.9780\n","Epoch 93/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0428 - accuracy: 0.9642 - val_loss: 0.0378 - val_accuracy: 0.9670\n","Epoch 94/100\n","19/19 [==============================] - 7s 354ms/step - loss: 0.0319 - accuracy: 0.9752 - val_loss: 0.0654 - val_accuracy: 0.9231\n","Epoch 95/100\n","19/19 [==============================] - 8s 450ms/step - loss: 0.0369 - accuracy: 0.9725 - val_loss: 0.0345 - val_accuracy: 0.9780\n","Epoch 96/100\n","19/19 [==============================] - 7s 353ms/step - loss: 0.0376 - accuracy: 0.9725 - val_loss: 0.0405 - val_accuracy: 0.9560\n","Epoch 97/100\n","19/19 [==============================] - 7s 393ms/step - loss: 0.0391 - accuracy: 0.9697 - val_loss: 0.0371 - val_accuracy: 0.9670\n","Epoch 98/100\n","19/19 [==============================] - 8s 416ms/step - loss: 0.0333 - accuracy: 0.9752 - val_loss: 0.0512 - val_accuracy: 0.9451\n","Epoch 99/100\n","19/19 [==============================] - 7s 355ms/step - loss: 0.0430 - accuracy: 0.9614 - val_loss: 0.0346 - val_accuracy: 0.9670\n","Epoch 100/100\n","19/19 [==============================] - 7s 351ms/step - loss: 0.0381 - accuracy: 0.9697 - val_loss: 0.0588 - val_accuracy: 0.9451\n","[INFO] saving siamese model...\n","INFO:tensorflow:Assets written to: output/siamese_model/assets\n"]},{"output_type":"stream","name":"stderr","text":["INFO:tensorflow:Assets written to: output/siamese_model/assets\n"]},{"output_type":"stream","name":"stdout","text":["[INFO] plotting training history...\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.evaluate([pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pt8sg48Lj3Eg","executionInfo":{"status":"ok","timestamp":1658242650964,"user_tz":-330,"elapsed":7633,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"ed5ab864-7290-427f-ebed-14a8b9ade7b4"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["15/15 [==============================] - 2s 132ms/step - loss: 0.0253 - accuracy: 0.9868\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.025305967777967453, 0.9867841601371765]"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["!cp -r output/ drive/MyDrive/LJMU_MSc_6months/iteration3/output3/"],"metadata":{"id":"b2DTHw8Hu53T","executionInfo":{"status":"ok","timestamp":1658242801992,"user_tz":-330,"elapsed":651,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["# Test the model on Test data\n","\n","# Prepare the test data\n","test_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/test/farenback_of\"\n","# test_files = os.listdir(test_path)\n","# print (len(test_files))\n","\n","test_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/test_data.csv\")\n","test_csv = test_csv[test_csv[\"target\"].isin([1., 5., 7.])].reset_index(drop=True)\n","test_csv[\"target\"] = test_csv[\"target\"].astype(int)\n","test_csv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"eEBoAXbEdzQm","executionInfo":{"status":"ok","timestamp":1658242656637,"user_tz":-330,"elapsed":662,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"091f9189-b48e-42d0-f1c4-d47196636d1a"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                      image_seq_path  image_seq_length  \\\n","0  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","1  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","2  CK+/extended-cohn-kanade-images/cohn-kanade-im...                11   \n","3  CK+/extended-cohn-kanade-images/cohn-kanade-im...                71   \n","4  CK+/extended-cohn-kanade-images/cohn-kanade-im...                21   \n","\n","   target            first_image             last_image  \n","0       1  S100_005_00000001.png  S100_005_00000023.png  \n","1       1  S113_008_00000001.png  S113_008_00000023.png  \n","2       1  S066_005_00000001.png  S066_005_00000011.png  \n","3       1  S503_001_00000001.png  S503_001_00000071.png  \n","4       1  S050_004_00000001.png  S050_004_00000021.png  "],"text/html":["\n","  <div id=\"df-849fc434-1d46-4b50-8873-46f49d9a2fcd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_seq_path</th>\n","      <th>image_seq_length</th>\n","      <th>target</th>\n","      <th>first_image</th>\n","      <th>last_image</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1</td>\n","      <td>S100_005_00000001.png</td>\n","      <td>S100_005_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1</td>\n","      <td>S113_008_00000001.png</td>\n","      <td>S113_008_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>11</td>\n","      <td>1</td>\n","      <td>S066_005_00000001.png</td>\n","      <td>S066_005_00000011.png</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>S503_001_00000001.png</td>\n","      <td>S503_001_00000071.png</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>21</td>\n","      <td>1</td>\n","      <td>S050_004_00000001.png</td>\n","      <td>S050_004_00000021.png</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-849fc434-1d46-4b50-8873-46f49d9a2fcd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-849fc434-1d46-4b50-8873-46f49d9a2fcd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-849fc434-1d46-4b50-8873-46f49d9a2fcd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["test_csv[\"of_img\"] = test_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","test_csv[\"of_img\"].sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTvJsbzPexD9","executionInfo":{"status":"ok","timestamp":1658242660905,"user_tz":-330,"elapsed":354,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"981da639-4585-4052-dd28-06715b42375b"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["18    S132_008.png\n","4     S050_004.png\n","3     S503_001.png\n","9     S014_005.png\n","2     S066_005.png\n","Name: of_img, dtype: object"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["test_X = None\n","test_y = None\n","first_round = True\n","for i, row in test_csv.iterrows():\n","  img = cv2.imread(os.path.join(test_path, row[\"of_img\"]))\n","  img = cv2.resize(img, (100, 100))\n","  # target = test_csv[test_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  target = row[\"target\"]\n","  if target == 1 :\n","    target = 0\n","  elif target == 5:\n","    target = 1\n","  else :\n","    target = 2\n","\n","  if first_round: \n","    test_X = [img]\n","    test_y = [target]\n","    first_round = False\n","  else:\n","    test_X = np.append(test_X,[img], axis=0)\n","    test_y = np.append(test_y, [target], axis=0)"],"metadata":{"id":"ViSfC0zjfkji","executionInfo":{"status":"ok","timestamp":1658242683392,"user_tz":-330,"elapsed":9085,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["print (test_X.shape, test_y.shape)\n","\n","plt.imshow(test_X[0])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"j-9S8UG2gACm","executionInfo":{"status":"ok","timestamp":1658242687989,"user_tz":-330,"elapsed":676,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"4378c09b-11d3-46bb-d5c2-a841262ed11c"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["(21, 100, 100, 3) (21,)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# test_y = test_y.astype(int)\n","np.unique(test_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hd8PnB7RgFfO","executionInfo":{"status":"ok","timestamp":1658242693876,"user_tz":-330,"elapsed":9,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"7e3135da-41ef-4874-ad2a-e5fd59c6d169"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2])"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# convert values to 0-1 range\n","X = test_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTest, labelTest) = make_pairs(X, test_y)\n","print (pairTest.shape, labelTest.shape)\n","\n","model.evaluate([pairTest[:, 0], pairTest[:, 1]], labelTest[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRmcBMZagNmN","executionInfo":{"status":"ok","timestamp":1658242718661,"user_tz":-330,"elapsed":368,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"f8557bb7-d266-4d3e-b60a-2ee43783b7b9"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(42, 2, 100, 100, 3, 1) (42, 1)\n","2/2 [==============================] - 0s 46ms/step - loss: 0.0819 - accuracy: 0.9048\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.0819057822227478, 0.9047619104385376]"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["inst = X[0].reshape((1,100,100,3))\n","print (inst.shape)\n","featureExtractor.predict(inst).shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F_BY2jHI-nja","executionInfo":{"status":"ok","timestamp":1658243602634,"user_tz":-330,"elapsed":3,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"0c7c0c59-06e8-4230-eda8-b1bf8885e0f2"},"execution_count":54,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 100, 100, 3)\n"]},{"output_type":"execute_result","data":{"text/plain":["(1, 64)"]},"metadata":{},"execution_count":54}]},{"cell_type":"code","source":["## Save featureExtractor model\n","featureExtractor.save(\"drive/MyDrive/LJMU_MSc_6months/iteration3/output3/fetureExtractor\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faCnVY1pUpkn","executionInfo":{"status":"ok","timestamp":1658242874914,"user_tz":-330,"elapsed":1381,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"683a1bd9-abbf-4eb5-ceb4-44dbca9ea6ae"},"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stdout","text":["INFO:tensorflow:Assets written to: drive/MyDrive/LJMU_MSc_6months/iteration3/output3/fetureExtractor/assets\n"]},{"output_type":"stream","name":"stderr","text":["INFO:tensorflow:Assets written to: drive/MyDrive/LJMU_MSc_6months/iteration3/output3/fetureExtractor/assets\n"]}]},{"cell_type":"code","source":["## Save the pair and Label data\n","\n","# for train data\n","np.save(\"pairTrain\",pairTrain)\n","np.save(\"labelTrain\",labelTrain)\n","\n","# for test data\n","np.save(\"pairTest\",pairTest)\n","np.save(\"labelTest\",labelTest)"],"metadata":{"id":"jTfQV0CBUpq_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!mv pairTrain.npy labelTrain.npy pairTest.npy labelTest.npy drive/MyDrive/LJMU_MSc_6months/iteration2/output2/"],"metadata":{"id":"Nt9CQaajVdlc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## check the average performance "],"metadata":{"id":"KD7OUoDnWGZz"},"execution_count":null,"outputs":[]}]}