{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of SNN_FER","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOqtDbonT0rqLcZvPN6PjVe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"KR7PsFJKRvGO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658392661876,"user_tz":-330,"elapsed":35204,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"d51aedf1-bb7e-4956-9e92-44d436d85f37"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import cv2\n","import numpy as np\n","\n","train_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/train/farenback_of\"\n","train_files = os.listdir(train_path)\n","print (len(train_files))\n","\n","train_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/train_aug.csv\")\n","train_csv[\"of_img\"] = train_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","\n","train_X = None\n","train_y = None\n","first_round = True\n","for fl in train_files:\n","  img = cv2.imread(os.path.join(train_path, fl))\n","  img = cv2.resize(img, (120, 120))\n","  target = train_csv[train_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    train_X = [img]\n","    train_y = [target]\n","    first_round = False\n","  else:\n","    train_X = np.append(train_X,[img], axis=0)\n","    train_y = np.append(train_y, [target], axis=0)\n","\n","del train_csv, train_path, train_files\n","train_X.shape, train_y.shape"],"metadata":{"id":"6biZEJN6RwyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658392695326,"user_tz":-330,"elapsed":25708,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"77dc0238-537c-494d-a670-f1fc169102bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["516\n"]},{"output_type":"execute_result","data":{"text/plain":["((516, 120, 120, 3), (516,))"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import random\n","%matplotlib inline \n","\n","## Check the image data\n","plt.imshow(train_X[random.randint(0,500)])\n","plt.show()\n","\n","## check the target data\n","print (np.unique(train_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"gBt9ck-7qnsJ","executionInfo":{"status":"ok","timestamp":1658392695326,"user_tz":-330,"elapsed":19,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"627a508f-5af0-4d95-9934-70ec6c3ae088"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[0 1 2 3 4 5 6]\n"]}]},{"cell_type":"code","source":["# %%writefile config.py\n","\n","# import the necessary packages\n","import os\n","# specify the shape of the inputs for our network\n","IMG_SHAPE = (120, 120, 3)\n","# specify the batch size and number of epochs\n","BATCH_SIZE = 25\n","EPOCHS = 100\n","\n","# define the path to the base output directory\n","BASE_OUTPUT = \"output\"\n","# use the base output path to derive the path to the serialized\n","# model along with training history plot\n","MODEL_PATH = os.path.sep.join([BASE_OUTPUT, \"siamese_model\"])\n","PLOT_PATH = os.path.sep.join([BASE_OUTPUT, \"plot.png\"])"],"metadata":{"id":"5BNoAelmqea0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# %%writefile utils.py\n","\n","# import the necessary packages\n","import tensorflow.keras.backend as K\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import tensorflow as tf\n","\n","def make_pairs(images, labels):\n","\t# initialize two empty lists to hold the (image, image) pairs and\n","\t# labels to indicate if a pair is positive or negative\n","\tpairImages = []\n","\tpairLabels = []\n","\t# calculate the total number of classes present in the dataset\n","\t# and then build a list of indexes for each class label that\n","\t# provides the indexes for all examples with a given label\n","\tnumClasses = len(np.unique(labels))\n","\tidx = [np.where(labels == i)[0] for i in range(0, numClasses)]\n","\t# loop over all images\n","\tfor idxA in range(len(images)):\n","\t\t# grab the current image and label belonging to the current\n","\t\t# iteration\n","\t\tcurrentImage = images[idxA]\n","\t\tlabel = labels[idxA]\n","\t\t# randomly pick an image that belongs to the *same* class\n","\t\t# label\n","\t\tidxB = np.random.choice(idx[label])\n","\t\tposImage = images[idxB]\n","\t\t# prepare a positive pair and update the images and labels\n","\t\t# lists, respectively\n","\t\tpairImages.append([currentImage, posImage])\n","\t\tpairLabels.append([1])\n","\t\t# grab the indices for each of the class labels *not* equal to\n","\t\t# the current label and randomly pick an image corresponding\n","\t\t# to a label *not* equal to the current label\n","\t\tnegIdx = np.where(labels != label)[0]\n","\t\tnegImage = images[np.random.choice(negIdx)]\n","\t\t# prepare a negative pair of images and update our lists\n","\t\tpairImages.append([currentImage, negImage])\n","\t\tpairLabels.append([0])\n","\t# return a 2-tuple of our image pairs and labels\n","\treturn (np.array(pairImages), np.array(pairLabels))\n","\n","\n","def euclidean_distance(vectors):\n","\t# unpack the vectors into separate lists\n","\t(featsA, featsB) = vectors\n","\t# compute the sum of squared distances between the vectors\n","\tsumSquared = K.sum(K.square(featsA - featsB), axis=1,\n","\t\tkeepdims=True)\n","\t# return the euclidean distance between the vectors\n","\treturn K.sqrt(K.maximum(sumSquared, K.epsilon()))\n","\n","\n","def contrastive_loss(y, preds, margin=1):\n","\t# explicitly cast the true class label data type to the predicted\n","\t# class label data type (otherwise we run the risk of having two\n","\t# separate data types, causing TensorFlow to error out)\n","\ty = tf.cast(y, preds.dtype)\n","\t# calculate the contrastive loss between the true labels and\n","\t# the predicted labels\n","\tsquaredPreds = K.square(preds)\n","\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n","\tloss = K.mean(y * squaredMargin + (1 - y) * squaredPreds)\n","\t# return the computed contrastive loss to the calling function\n","\treturn loss\n","\n","def plot_training(H, plotPath):\n","\t# construct a plot that plots and saves the training history\n","\tplt.style.use(\"ggplot\")\n","\tplt.figure()\n","\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n","\tplt.plot(H.history[\"val_loss\"], label=\"val_loss\")\n","\tplt.plot(H.history[\"accuracy\"], label=\"train_acc\")\n","\tplt.plot(H.history[\"val_accuracy\"], label=\"val_acc\")\n","\tplt.title(\"Training Loss and Accuracy\")\n","\tplt.xlabel(\"Epoch #\")\n","\tplt.ylabel(\"Loss/Accuracy\")\n","\tplt.legend(loc=\"lower left\")\n","\tplt.savefig(plotPath)"],"metadata":{"id":"mbTKhwWNrc76"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Flatten\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.applications import ResNet50\n","\n","def build_siamese_model(inputShape, embeddingDim=48):\n","\n","\t# # create the base pre-trained model\n","# \tpretrained_model = ResNet50(\n","# \t\t\t\t\t\t\t\t\t\tinclude_top=False,\n","# \t\t\t\t\t\t\t\t\t\tinput_shape=inputShape,\n","# \t\t\t\t\t\t\t\t\t\tpooling='avg',\n","# \t\t\t\t\t\t\t\t\t\tclasses=7,\n","# \t\t\t\t\t\t\t\t\t\tweights='imagenet')\n"," \n","#  # first: train only the top layers (which were randomly initialized)\n","# \t# i.e. freeze all convolutional \n","# \tfor layer in pretrained_model.layers:\n","# \t\tlayer.trainable = False\n","\n","\t# specify the inputs for the feature extractor network\n","\tinputs = Input(inputShape)\n","\t# define the first set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(inputs)\n","\tx = MaxPooling2D(pool_size=(2, 2))(x)\n","\tx = Dropout(0.3)(x)\n","\t# second set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\tx = MaxPooling2D(pool_size=2)(x)\n","\tx = Dropout(0.3)(x)\n","\t# # third set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\tx = MaxPooling2D(pool_size=2)(x)\n","\tx = Dropout(0.3)(x)\n","\n","\n","\t# prepare the final outputs\n","\n","\tx = Flatten()(x) \n","\t# x = GlobalAveragePooling2D()(x)\n","\tx = Dense(128, activation=\"relu\")(x)\n","\tx = Dropout(0.2)(x)\n","\tx = Dense(64, activation=\"relu\")(x)\n","\tx = Dropout(0.2)(x)\n","\tx = Dense(32, activation=\"relu\")(x)\n","\tx = Dropout(0.2)(x)\n","\toutputs = Dense(embeddingDim)(x)\n","\t# build the model\n","\tmodel = Model(inputs, outputs)\n","\t\n","\t# return the model to the calling function\n","\treturn model"],"metadata":{"id":"FvnM8aLec_uB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","# from siamese_network import build_siamese_model\n","# import config\n","# import utils\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Lambda\n","import numpy as np\n","\n","\n","# convert values to 0-1 range\n","X = train_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTrain, labelTrain) = make_pairs(X, train_y)\n","\n","# (pTr2, lTr2) = make_pairs(X, train_y)\n","# pairTrain = np.append(pairTrain, pTr2, axis=0)\n","# labelTrain = np.append(labelTrain, lTr2, axis=0)\n","\n","print (pairTrain.shape, labelTrain.shape)\n","# del train_X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rNErRi6rrpok","executionInfo":{"status":"ok","timestamp":1658394018145,"user_tz":-330,"elapsed":2423,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"a5ad687e-f692-4a49-9c47-b463e5b4b92c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(1032, 2, 120, 120, 3, 1) (1032, 1)\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import RMSprop\n","\n","# configure the siamese network\n","print(\"[INFO] building siamese network...\")\n","imgA = Input(shape=IMG_SHAPE)\n","imgB = Input(shape=IMG_SHAPE)\n","featureExtractor = build_siamese_model(IMG_SHAPE, 32)\n","featsA = featureExtractor(imgA)\n","featsB = featureExtractor(imgB)\n","\n","# finally, construct the siamese network\n","distance = Lambda(euclidean_distance)([featsA, featsB])\n","# outputs = Dense(16, activation=\"relu\")(distance)\n","outputs = Dense(1, activation=\"sigmoid\")(distance)\n","model = Model(inputs=[imgA, imgB], outputs=outputs, name=\"SNN_model\")\n","\n","# compile the model\n","print(\"[INFO] compiling model...\")\n","model.compile(loss=contrastive_loss, \n","              optimizer=\"rmsprop\", \n","              metrics=[\"accuracy\"])\n","# model.compile(loss=contrastive_loss, optimizer=\"adam\", metrics=[\"accuracy\"])\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSZTxKWptro8","executionInfo":{"status":"ok","timestamp":1658394942647,"user_tz":-330,"elapsed":581,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"fe45a00c-a9dc-4332-a95a-31242bc4393c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] building siamese network...\n","[INFO] compiling model...\n","Model: \"SNN_model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_25 (InputLayer)          [(None, 120, 120, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," input_26 (InputLayer)          [(None, 120, 120, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," model_8 (Functional)           (None, 32)           941792      ['input_25[0][0]',               \n","                                                                  'input_26[0][0]']               \n","                                                                                                  \n"," lambda_8 (Lambda)              (None, 1)            0           ['model_8[0][0]',                \n","                                                                  'model_8[1][0]']                \n","                                                                                                  \n"," dense_40 (Dense)               (None, 1)            2           ['lambda_8[0][0]']               \n","                                                                                                  \n","==================================================================================================\n","Total params: 941,794\n","Trainable params: 941,794\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# train the model\n","print(\"[INFO] training model...\")\n","history = model.fit(\n","\t[pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:],\n","\tvalidation_split=0.20,\n","\tbatch_size=BATCH_SIZE, \n","\tshuffle=True,\n","\tepochs=EPOCHS)\n","\n","# serialize the model to disk\n","print(\"[INFO] saving siamese model...\")\n","model.save(MODEL_PATH)\n","\n","# plot the training history\n","print(\"[INFO] plotting training history...\")\n","plot_training(history, PLOT_PATH)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"jBtuHRRzs8yx","executionInfo":{"status":"ok","timestamp":1658394199028,"user_tz":-330,"elapsed":110374,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"c03d6d0b-74f7-4e42-b207-5759ce8c6266"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] training model...\n","Epoch 1/100\n","33/33 [==============================] - 2s 36ms/step - loss: 0.2549 - accuracy: 0.5006 - val_loss: 0.2500 - val_accuracy: 0.4976\n","Epoch 2/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2507 - accuracy: 0.5067 - val_loss: 0.2500 - val_accuracy: 0.4976\n","Epoch 3/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2502 - accuracy: 0.5188 - val_loss: 0.2493 - val_accuracy: 0.5749\n","Epoch 4/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2481 - accuracy: 0.5382 - val_loss: 0.2445 - val_accuracy: 0.5459\n","Epoch 5/100\n","33/33 [==============================] - 1s 23ms/step - loss: 0.2464 - accuracy: 0.5527 - val_loss: 0.2436 - val_accuracy: 0.6184\n","Epoch 6/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2423 - accuracy: 0.5491 - val_loss: 0.2367 - val_accuracy: 0.6039\n","Epoch 7/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2357 - accuracy: 0.5988 - val_loss: 0.2317 - val_accuracy: 0.5556\n","Epoch 8/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2325 - accuracy: 0.6097 - val_loss: 0.2303 - val_accuracy: 0.6473\n","Epoch 9/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2264 - accuracy: 0.6267 - val_loss: 0.2279 - val_accuracy: 0.6715\n","Epoch 10/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2212 - accuracy: 0.6303 - val_loss: 0.2336 - val_accuracy: 0.6522\n","Epoch 11/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2182 - accuracy: 0.6424 - val_loss: 0.2242 - val_accuracy: 0.6763\n","Epoch 12/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2145 - accuracy: 0.6461 - val_loss: 0.2143 - val_accuracy: 0.6570\n","Epoch 13/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2077 - accuracy: 0.6521 - val_loss: 0.2245 - val_accuracy: 0.6522\n","Epoch 14/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2097 - accuracy: 0.6642 - val_loss: 0.2172 - val_accuracy: 0.6860\n","Epoch 15/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2039 - accuracy: 0.6691 - val_loss: 0.2130 - val_accuracy: 0.6860\n","Epoch 16/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.2013 - accuracy: 0.6739 - val_loss: 0.2121 - val_accuracy: 0.6957\n","Epoch 17/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.1957 - accuracy: 0.6897 - val_loss: 0.2144 - val_accuracy: 0.6618\n","Epoch 18/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.1933 - accuracy: 0.6885 - val_loss: 0.1996 - val_accuracy: 0.7150\n","Epoch 19/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.1930 - accuracy: 0.6958 - val_loss: 0.2101 - val_accuracy: 0.6618\n","Epoch 20/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.1958 - accuracy: 0.7018 - val_loss: 0.1996 - val_accuracy: 0.7198\n","Epoch 21/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.1856 - accuracy: 0.7164 - val_loss: 0.1918 - val_accuracy: 0.7391\n","Epoch 22/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1811 - accuracy: 0.7224 - val_loss: 0.1996 - val_accuracy: 0.7150\n","Epoch 23/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1856 - accuracy: 0.7055 - val_loss: 0.1889 - val_accuracy: 0.7295\n","Epoch 24/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1834 - accuracy: 0.7321 - val_loss: 0.1876 - val_accuracy: 0.7343\n","Epoch 25/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1777 - accuracy: 0.7527 - val_loss: 0.1889 - val_accuracy: 0.7198\n","Epoch 26/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1775 - accuracy: 0.7382 - val_loss: 0.1924 - val_accuracy: 0.7053\n","Epoch 27/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1743 - accuracy: 0.7624 - val_loss: 0.1889 - val_accuracy: 0.7246\n","Epoch 28/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1697 - accuracy: 0.7661 - val_loss: 0.1856 - val_accuracy: 0.7246\n","Epoch 29/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1679 - accuracy: 0.7673 - val_loss: 0.1955 - val_accuracy: 0.7053\n","Epoch 30/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1650 - accuracy: 0.7770 - val_loss: 0.1820 - val_accuracy: 0.7729\n","Epoch 31/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1697 - accuracy: 0.7527 - val_loss: 0.1866 - val_accuracy: 0.7488\n","Epoch 32/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1688 - accuracy: 0.7491 - val_loss: 0.1801 - val_accuracy: 0.7488\n","Epoch 33/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1643 - accuracy: 0.7721 - val_loss: 0.1854 - val_accuracy: 0.7488\n","Epoch 34/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1604 - accuracy: 0.7685 - val_loss: 0.1786 - val_accuracy: 0.7391\n","Epoch 35/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1617 - accuracy: 0.7818 - val_loss: 0.1815 - val_accuracy: 0.7343\n","Epoch 36/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1577 - accuracy: 0.7855 - val_loss: 0.1888 - val_accuracy: 0.7343\n","Epoch 37/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1590 - accuracy: 0.7842 - val_loss: 0.1750 - val_accuracy: 0.7681\n","Epoch 38/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1563 - accuracy: 0.7927 - val_loss: 0.1779 - val_accuracy: 0.7536\n","Epoch 39/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1591 - accuracy: 0.7842 - val_loss: 0.1901 - val_accuracy: 0.7198\n","Epoch 40/100\n","33/33 [==============================] - 1s 23ms/step - loss: 0.1627 - accuracy: 0.7733 - val_loss: 0.1847 - val_accuracy: 0.7343\n","Epoch 41/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1502 - accuracy: 0.8073 - val_loss: 0.1829 - val_accuracy: 0.7391\n","Epoch 42/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1523 - accuracy: 0.7855 - val_loss: 0.1833 - val_accuracy: 0.7536\n","Epoch 43/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1501 - accuracy: 0.8012 - val_loss: 0.1783 - val_accuracy: 0.7101\n","Epoch 44/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1535 - accuracy: 0.7952 - val_loss: 0.1882 - val_accuracy: 0.7101\n","Epoch 45/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1442 - accuracy: 0.8121 - val_loss: 0.1792 - val_accuracy: 0.7343\n","Epoch 46/100\n","33/33 [==============================] - 1s 23ms/step - loss: 0.1404 - accuracy: 0.8194 - val_loss: 0.1799 - val_accuracy: 0.7150\n","Epoch 47/100\n","33/33 [==============================] - 1s 26ms/step - loss: 0.1418 - accuracy: 0.8133 - val_loss: 0.1777 - val_accuracy: 0.7536\n","Epoch 48/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1360 - accuracy: 0.8376 - val_loss: 0.1674 - val_accuracy: 0.7729\n","Epoch 49/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1340 - accuracy: 0.8218 - val_loss: 0.1721 - val_accuracy: 0.7633\n","Epoch 50/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1353 - accuracy: 0.8327 - val_loss: 0.1715 - val_accuracy: 0.7729\n","Epoch 51/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1283 - accuracy: 0.8570 - val_loss: 0.1711 - val_accuracy: 0.7681\n","Epoch 52/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1273 - accuracy: 0.8376 - val_loss: 0.1614 - val_accuracy: 0.7729\n","Epoch 53/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1304 - accuracy: 0.8473 - val_loss: 0.1587 - val_accuracy: 0.7826\n","Epoch 54/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1247 - accuracy: 0.8485 - val_loss: 0.1668 - val_accuracy: 0.7391\n","Epoch 55/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1218 - accuracy: 0.8545 - val_loss: 0.1617 - val_accuracy: 0.7971\n","Epoch 56/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1219 - accuracy: 0.8533 - val_loss: 0.1572 - val_accuracy: 0.7729\n","Epoch 57/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1214 - accuracy: 0.8485 - val_loss: 0.1563 - val_accuracy: 0.7778\n","Epoch 58/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1221 - accuracy: 0.8473 - val_loss: 0.1593 - val_accuracy: 0.7923\n","Epoch 59/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1130 - accuracy: 0.8727 - val_loss: 0.1553 - val_accuracy: 0.8019\n","Epoch 60/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1118 - accuracy: 0.8667 - val_loss: 0.1515 - val_accuracy: 0.8019\n","Epoch 61/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1215 - accuracy: 0.8582 - val_loss: 0.1489 - val_accuracy: 0.8116\n","Epoch 62/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1142 - accuracy: 0.8703 - val_loss: 0.1536 - val_accuracy: 0.7874\n","Epoch 63/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1121 - accuracy: 0.8655 - val_loss: 0.1531 - val_accuracy: 0.7874\n","Epoch 64/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1092 - accuracy: 0.8630 - val_loss: 0.1503 - val_accuracy: 0.7874\n","Epoch 65/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1156 - accuracy: 0.8618 - val_loss: 0.1731 - val_accuracy: 0.7343\n","Epoch 66/100\n","33/33 [==============================] - 1s 23ms/step - loss: 0.1097 - accuracy: 0.8739 - val_loss: 0.1478 - val_accuracy: 0.7923\n","Epoch 67/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1055 - accuracy: 0.8764 - val_loss: 0.1497 - val_accuracy: 0.7826\n","Epoch 68/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1064 - accuracy: 0.8739 - val_loss: 0.1503 - val_accuracy: 0.7826\n","Epoch 69/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1056 - accuracy: 0.8824 - val_loss: 0.1566 - val_accuracy: 0.7826\n","Epoch 70/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1024 - accuracy: 0.8861 - val_loss: 0.1605 - val_accuracy: 0.7826\n","Epoch 71/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1033 - accuracy: 0.8836 - val_loss: 0.1574 - val_accuracy: 0.7971\n","Epoch 72/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1068 - accuracy: 0.8727 - val_loss: 0.1600 - val_accuracy: 0.7585\n","Epoch 73/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0995 - accuracy: 0.8885 - val_loss: 0.1534 - val_accuracy: 0.7681\n","Epoch 74/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1094 - accuracy: 0.8764 - val_loss: 0.1563 - val_accuracy: 0.7729\n","Epoch 75/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1002 - accuracy: 0.8861 - val_loss: 0.1506 - val_accuracy: 0.7923\n","Epoch 76/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1041 - accuracy: 0.8727 - val_loss: 0.1493 - val_accuracy: 0.7874\n","Epoch 77/100\n","33/33 [==============================] - 1s 23ms/step - loss: 0.1024 - accuracy: 0.8764 - val_loss: 0.1493 - val_accuracy: 0.7874\n","Epoch 78/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0983 - accuracy: 0.8921 - val_loss: 0.1512 - val_accuracy: 0.7971\n","Epoch 79/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1005 - accuracy: 0.8812 - val_loss: 0.1454 - val_accuracy: 0.7971\n","Epoch 80/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0989 - accuracy: 0.8848 - val_loss: 0.1496 - val_accuracy: 0.7971\n","Epoch 81/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0972 - accuracy: 0.8861 - val_loss: 0.1485 - val_accuracy: 0.7729\n","Epoch 82/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0965 - accuracy: 0.8848 - val_loss: 0.1543 - val_accuracy: 0.7826\n","Epoch 83/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1063 - accuracy: 0.8691 - val_loss: 0.1615 - val_accuracy: 0.7633\n","Epoch 84/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0941 - accuracy: 0.8848 - val_loss: 0.1482 - val_accuracy: 0.7923\n","Epoch 85/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0937 - accuracy: 0.8885 - val_loss: 0.1499 - val_accuracy: 0.7874\n","Epoch 86/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0972 - accuracy: 0.8788 - val_loss: 0.1472 - val_accuracy: 0.7729\n","Epoch 87/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0981 - accuracy: 0.8800 - val_loss: 0.1479 - val_accuracy: 0.8019\n","Epoch 88/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0972 - accuracy: 0.8752 - val_loss: 0.1477 - val_accuracy: 0.7633\n","Epoch 89/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0938 - accuracy: 0.8861 - val_loss: 0.1515 - val_accuracy: 0.7633\n","Epoch 90/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0956 - accuracy: 0.8945 - val_loss: 0.1522 - val_accuracy: 0.7729\n","Epoch 91/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.1016 - accuracy: 0.8679 - val_loss: 0.1478 - val_accuracy: 0.7778\n","Epoch 92/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0882 - accuracy: 0.8994 - val_loss: 0.1564 - val_accuracy: 0.7778\n","Epoch 93/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0980 - accuracy: 0.8727 - val_loss: 0.1513 - val_accuracy: 0.7923\n","Epoch 94/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0892 - accuracy: 0.8873 - val_loss: 0.1450 - val_accuracy: 0.7971\n","Epoch 95/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0918 - accuracy: 0.8897 - val_loss: 0.1421 - val_accuracy: 0.7826\n","Epoch 96/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0867 - accuracy: 0.8933 - val_loss: 0.1467 - val_accuracy: 0.8019\n","Epoch 97/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0908 - accuracy: 0.8945 - val_loss: 0.1461 - val_accuracy: 0.8019\n","Epoch 98/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0890 - accuracy: 0.8994 - val_loss: 0.1446 - val_accuracy: 0.7874\n","Epoch 99/100\n","33/33 [==============================] - 1s 25ms/step - loss: 0.0884 - accuracy: 0.8994 - val_loss: 0.1499 - val_accuracy: 0.7923\n","Epoch 100/100\n","33/33 [==============================] - 1s 24ms/step - loss: 0.0850 - accuracy: 0.8982 - val_loss: 0.1462 - val_accuracy: 0.7923\n","[INFO] saving siamese model...\n","INFO:tensorflow:Assets written to: output/siamese_model/assets\n","[INFO] plotting training history...\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.evaluate([pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pt8sg48Lj3Eg","executionInfo":{"status":"ok","timestamp":1658394248780,"user_tz":-330,"elapsed":1172,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"6bd153a4-ba46-4619-ba0b-121920e4f995"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["33/33 [==============================] - 0s 15ms/step - loss: 0.0769 - accuracy: 0.9147\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.07692763954401016, 0.9147287011146545]"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["!cp -r output/ drive/MyDrive/LJMU_MSc_6months/iteration4/output/"],"metadata":{"id":"b2DTHw8Hu53T"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Test the model on Test data\n","\n","# Prepare the test data\n","test_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/test/farenback_of\"\n","test_files = os.listdir(test_path)\n","print (len(test_files))\n","\n","test_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/test_data.csv\")\n","test_csv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"eEBoAXbEdzQm","executionInfo":{"status":"ok","timestamp":1658393017415,"user_tz":-330,"elapsed":1416,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"adddf1b1-e9e0-4d4f-8294-ddadccf0e192"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["49\n"]},{"output_type":"execute_result","data":{"text/plain":["                                      image_seq_path  image_seq_length  \\\n","0  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","1  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","2  CK+/extended-cohn-kanade-images/cohn-kanade-im...                11   \n","3  CK+/extended-cohn-kanade-images/cohn-kanade-im...                71   \n","4  CK+/extended-cohn-kanade-images/cohn-kanade-im...                21   \n","\n","   target            first_image             last_image  \n","0     1.0  S100_005_00000001.png  S100_005_00000023.png  \n","1     1.0  S113_008_00000001.png  S113_008_00000023.png  \n","2     1.0  S066_005_00000001.png  S066_005_00000011.png  \n","3     1.0  S503_001_00000001.png  S503_001_00000071.png  \n","4     1.0  S050_004_00000001.png  S050_004_00000021.png  "],"text/html":["\n","  <div id=\"df-80dd37e1-0930-4190-af48-16726030334e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_seq_path</th>\n","      <th>image_seq_length</th>\n","      <th>target</th>\n","      <th>first_image</th>\n","      <th>last_image</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S100_005_00000001.png</td>\n","      <td>S100_005_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S113_008_00000001.png</td>\n","      <td>S113_008_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>11</td>\n","      <td>1.0</td>\n","      <td>S066_005_00000001.png</td>\n","      <td>S066_005_00000011.png</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>71</td>\n","      <td>1.0</td>\n","      <td>S503_001_00000001.png</td>\n","      <td>S503_001_00000071.png</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>21</td>\n","      <td>1.0</td>\n","      <td>S050_004_00000001.png</td>\n","      <td>S050_004_00000021.png</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80dd37e1-0930-4190-af48-16726030334e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-80dd37e1-0930-4190-af48-16726030334e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-80dd37e1-0930-4190-af48-16726030334e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["test_csv[\"of_img\"] = test_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","test_csv[\"of_img\"].sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTvJsbzPexD9","executionInfo":{"status":"ok","timestamp":1658393020567,"user_tz":-330,"elapsed":569,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"6a624a2d-564e-480b-8478-8c8c5f8f65b7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1     S113_008.png\n","34    S138_005.png\n","7     S503_002.png\n","37    S504_006.png\n","0     S100_005.png\n","Name: of_img, dtype: object"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["test_X = None\n","test_y = None\n","first_round = True\n","for fl in test_files:\n","  img = cv2.imread(os.path.join(test_path, fl))\n","  img = cv2.resize(img, (120, 120))\n","  target = test_csv[test_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    test_X = [img]\n","    test_y = [target]\n","    first_round = False\n","  else:\n","    test_X = np.append(test_X,[img], axis=0)\n","    test_y = np.append(test_y, [target], axis=0)"],"metadata":{"id":"ViSfC0zjfkji"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print (test_X.shape, test_y.shape)\n","\n","plt.imshow(test_X[0])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"j-9S8UG2gACm","executionInfo":{"status":"ok","timestamp":1658393068010,"user_tz":-330,"elapsed":13,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"7bcf8299-207b-44d5-bccd-d7ea451dfd39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(49, 120, 120, 3) (49,)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_y = test_y.astype(int)\n","np.unique(test_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hd8PnB7RgFfO","executionInfo":{"status":"ok","timestamp":1658393068011,"user_tz":-330,"elapsed":8,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"04ef5c38-ff75-4825-c397-cfa0529da3eb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6])"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["# convert values to 0-1 range\n","X = test_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTest, labelTest) = make_pairs(X, test_y)\n","(pTest, lTest) = make_pairs(X, test_y)\n","\n","pairTest = np.append(pairTest, pTest, axis=0)\n","labelTest = np.append(labelTest, lTest, axis=0)\n","\n","print (pairTest.shape, labelTest.shape)\n","\n","model.evaluate([pairTest[:, 0], pairTest[:, 1]], labelTest[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRmcBMZagNmN","executionInfo":{"status":"ok","timestamp":1658394615850,"user_tz":-330,"elapsed":770,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"98e01728-78b4-4d9e-d55f-cfd59e4d7897"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(196, 2, 120, 120, 3, 1) (196, 1)\n","7/7 [==============================] - 0s 14ms/step - loss: 0.1567 - accuracy: 0.8010\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.1567384898662567, 0.8010203838348389]"]},"metadata":{},"execution_count":72}]},{"cell_type":"code","source":["inst = pairTrain[:, 0][0].reshape((1,120,120,3,1))\n","print (inst.shape)\n","featureExtractor.predict(inst)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wFCUbfJTNMrt","executionInfo":{"status":"ok","timestamp":1658394814323,"user_tz":-330,"elapsed":585,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"89905b3d-3339-44a6-c5e6-24a1e3da910c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1, 120, 120, 3, 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[ 1.1958502e-04, -3.5205310e-05, -5.8200942e-05,  2.8613905e-04,\n","         1.1001044e-04,  9.1554757e-05,  2.3116403e-04, -9.7375865e-05,\n","        -8.7624619e-05,  1.7686169e-04,  1.7182968e-04,  1.4710861e-04,\n","        -4.1057871e-04,  7.8256249e-05, -5.4204684e-05, -4.8408365e-05,\n","        -4.3635817e-05, -9.2076050e-05,  8.1026155e-06, -9.2952250e-06,\n","        -2.5965611e-04,  2.2028913e-05,  2.7237611e-04,  7.3251431e-05,\n","         6.6667868e-05,  9.6096432e-05,  1.0936813e-04,  3.3092067e-05,\n","        -5.7653109e-05,  5.9033715e-05, -8.4291452e-05,  1.4135195e-04]],\n","      dtype=float32)"]},"metadata":{},"execution_count":76}]},{"cell_type":"code","source":["## Save featureExtractor model\n","featureExtractor.save(\"drive/MyDrive/LJMU_MSc_6months/iteration4/output/fetureExtractor\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faCnVY1pUpkn","executionInfo":{"status":"ok","timestamp":1658394862626,"user_tz":-330,"elapsed":1436,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"458eda7c-f32a-44ff-f8d5-31f6547462ac"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","INFO:tensorflow:Assets written to: drive/MyDrive/LJMU_MSc_6months/iteration4/output/fetureExtractor/assets\n"]}]},{"cell_type":"code","source":["## Save the pair and Label data\n","\n","# for train data\n","np.save(\"pairTrain\",pairTrain)\n","np.save(\"labelTrain\",labelTrain)\n","\n","# for test data\n","np.save(\"pairTest\",pairTest)\n","np.save(\"labelTest\",labelTest)"],"metadata":{"id":"jTfQV0CBUpq_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!mv pairTrain.npy labelTrain.npy pairTest.npy labelTest.npy drive/MyDrive/LJMU_MSc_6months/iteration4/output/"],"metadata":{"id":"Nt9CQaajVdlc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"KD7OUoDnWGZz"},"execution_count":null,"outputs":[]}]}