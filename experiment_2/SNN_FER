{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SNN_FER","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyME0HYD2G7neqIL/umDxor0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"KR7PsFJKRvGO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660491764577,"user_tz":-330,"elapsed":35024,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"01b8a7de-7671-46e4-8234-d22b36c0b22d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import cv2\n","import numpy as np\n","\n","train_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/train/farenback_of\"\n","train_files = os.listdir(train_path)\n","print (len(train_files))\n","\n","train_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/train_aug.csv\")\n","train_csv[\"of_img\"] = train_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","\n","train_X = None\n","train_y = None\n","first_round = True\n","for fl in train_files:\n","  img = cv2.imread(os.path.join(train_path, fl))\n","  img = cv2.resize(img, (120, 120))\n","  target = train_csv[train_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    train_X = [img]\n","    train_y = [target]\n","    first_round = False\n","  else:\n","    train_X = np.append(train_X,[img], axis=0)\n","    train_y = np.append(train_y, [target], axis=0)\n","\n","del train_csv, train_path, train_files\n","train_X.shape, train_y.shape"],"metadata":{"id":"6biZEJN6RwyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660491795833,"user_tz":-330,"elapsed":26339,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"3970a6d5-8a5c-40c5-e847-0cc913ea7bf7"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["516\n"]},{"output_type":"execute_result","data":{"text/plain":["((516, 120, 120, 3), (516,))"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import random\n","%matplotlib inline \n","\n","## Check the image data\n","plt.imshow(train_X[random.randint(0,500)])\n","plt.show()\n","\n","## check the target data\n","print (np.unique(train_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"gBt9ck-7qnsJ","executionInfo":{"status":"ok","timestamp":1660491797309,"user_tz":-330,"elapsed":1490,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"99011509-ac71-45db-b012-0b4a717aec17"},"execution_count":3,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[0 1 2 3 4 5 6]\n"]}]},{"cell_type":"code","source":["# %%writefile config.py\n","\n","# import the necessary packages\n","import os\n","# specify the shape of the inputs for our network\n","IMG_SHAPE = (120, 120, 3)\n","# specify the batch size and number of epochs\n","BATCH_SIZE = 25\n","EPOCHS = 100\n","\n","# define the path to the base output directory\n","BASE_OUTPUT = \"output\"\n","# use the base output path to derive the path to the serialized\n","# model along with training history plot\n","MODEL_PATH = os.path.sep.join([BASE_OUTPUT, \"siamese_model\"])\n","PLOT_PATH = os.path.sep.join([BASE_OUTPUT, \"plot.png\"])"],"metadata":{"id":"5BNoAelmqea0","executionInfo":{"status":"ok","timestamp":1660491797311,"user_tz":-330,"elapsed":19,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# %%writefile utils.py\n","\n","# import the necessary packages\n","import tensorflow.keras.backend as K\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import tensorflow as tf\n","\n","def make_pairs(images, labels):\n","\t# initialize two empty lists to hold the (image, image) pairs and\n","\t# labels to indicate if a pair is positive or negative\n","\tpairImages = []\n","\tpairLabels = []\n","\t# calculate the total number of classes present in the dataset\n","\t# and then build a list of indexes for each class label that\n","\t# provides the indexes for all examples with a given label\n","\tnumClasses = len(np.unique(labels))\n","\tidx = [np.where(labels == i)[0] for i in range(0, numClasses)]\n","\t# loop over all images\n","\tfor idxA in range(len(images)):\n","\t\t# grab the current image and label belonging to the current\n","\t\t# iteration\n","\t\tcurrentImage = images[idxA]\n","\t\tlabel = labels[idxA]\n","\t\t# randomly pick an image that belongs to the *same* class\n","\t\t# label\n","\t\tidxB = np.random.choice(idx[label])\n","\t\tposImage = images[idxB]\n","\t\t# prepare a positive pair and update the images and labels\n","\t\t# lists, respectively\n","\t\tpairImages.append([currentImage, posImage])\n","\t\tpairLabels.append([1])\n","\t\t# grab the indices for each of the class labels *not* equal to\n","\t\t# the current label and randomly pick an image corresponding\n","\t\t# to a label *not* equal to the current label\n","\t\tnegIdx = np.where(labels != label)[0]\n","\t\tnegImage = images[np.random.choice(negIdx)]\n","\t\t# prepare a negative pair of images and update our lists\n","\t\tpairImages.append([currentImage, negImage])\n","\t\tpairLabels.append([0])\n","\t# return a 2-tuple of our image pairs and labels\n","\treturn (np.array(pairImages), np.array(pairLabels))\n","\n","\n","def euclidean_distance(vectors):\n","\t# unpack the vectors into separate lists\n","\t(featsA, featsB) = vectors\n","\t# compute the sum of squared distances between the vectors\n","\tsumSquared = K.sum(K.square(featsA - featsB), axis=1,\n","\t\tkeepdims=True)\n","\t# return the euclidean distance between the vectors\n","\treturn K.sqrt(K.maximum(sumSquared, K.epsilon()))\n","\n","\n","def contrastive_loss(y, preds, margin=1):\n","\t# explicitly cast the true class label data type to the predicted\n","\t# class label data type (otherwise we run the risk of having two\n","\t# separate data types, causing TensorFlow to error out)\n","\ty = tf.cast(y, preds.dtype)\n","\t# calculate the contrastive loss between the true labels and\n","\t# the predicted labels\n","\tsquaredPreds = K.square(preds)\n","\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n","\tloss = K.mean(y * squaredMargin + (1 - y) * squaredPreds)\n","\t# return the computed contrastive loss to the calling function\n","\treturn loss\n","\n","def plot_training(H, plotPath):\n","\t# construct a plot that plots and saves the training history\n","\tplt.style.use(\"ggplot\")\n","\tplt.figure()\n","\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n","\tplt.plot(H.history[\"val_loss\"], label=\"val_loss\")\n","\tplt.plot(H.history[\"accuracy\"], label=\"train_acc\")\n","\tplt.plot(H.history[\"val_accuracy\"], label=\"val_acc\")\n","\tplt.title(\"Training Loss and Accuracy\")\n","\tplt.xlabel(\"Epoch #\")\n","\tplt.ylabel(\"Loss/Accuracy\")\n","\tplt.legend(loc=\"lower left\")\n","\tplt.savefig(plotPath)"],"metadata":{"id":"mbTKhwWNrc76","executionInfo":{"status":"ok","timestamp":1660491798170,"user_tz":-330,"elapsed":875,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Flatten\n","from tensorflow.keras.layers import MaxPooling2D\n","from tensorflow.keras.applications import VGG16\n","\n","def build_siamese_model(inputShape, embeddingDim=48):\n","\n","\t# # create the base pre-trained model\n","\tpretrained_model = VGG16(\n","\t\t\t\t\t\t\t\t\t\tinclude_top=False,\n","\t\t\t\t\t\t\t\t\t\tinput_shape=inputShape,\n","\t\t\t\t\t\t\t\t\t\t# pooling='avg',\n","\t\t\t\t\t\t\t\t\t\t# classes=7,\n","\t\t\t\t\t\t\t\t\t\tweights='imagenet')\n"," \n"," # first: train only the top layers (which were randomly initialized)\n","\t# i.e. freeze all convolutional \n","\tfor layer in pretrained_model.layers:\n","\t\tlayer.trainable = False\n","\n","\t# specify the inputs for the feature extractor network\n","\t# inputs = Input(inputShape)\n","\t# define the first set of CONV => RELU => POOL => DROPOUT layers\n","\t# x = Conv2D(16, (2, 2), padding=\"same\", activation=\"relu\")(inputs)\n","\t# x = MaxPooling2D(pool_size=(2, 2))(x)\n","\t# x = Dropout(0.3)(x)\n","\t# second set of CONV => RELU => POOL => DROPOUT layers\n","\t# x = Conv2D(16, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\t# x = MaxPooling2D(pool_size=2)(x)\n","\t# x = Dropout(0.3)(x)\n","\t# # third set of CONV => RELU => POOL => DROPOUT layers\n","\t# x = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\t# x = MaxPooling2D(pool_size=2)(x)\n","\t# x = Dropout(0.3)(x)\n","\n","\n","\t# prepare the final outputs\n","\n","\tx = Flatten()(pretrained_model.output) \n","\t# x = GlobalAveragePooling2D()(x)\n","\tx = Dense(16, activation=\"relu\")(x)\n","\t# x = Dropout(0.3)(x)\n","\toutputs = Dense(embeddingDim)(x)\n","\t# build the model\n","\tmodel = Model(pretrained_model.input, outputs)\n","\t\n","\t# return the model to the calling function\n","\treturn model"],"metadata":{"id":"FvnM8aLec_uB","executionInfo":{"status":"ok","timestamp":1660496336882,"user_tz":-330,"elapsed":799,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","# from siamese_network import build_siamese_model\n","# import config\n","# import utils\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Lambda\n","import numpy as np\n","\n","\n","# convert values to 0-1 range\n","X = train_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTrain, labelTrain) = make_pairs(X, train_y)\n","\n","print (pairTrain.shape, labelTrain.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rNErRi6rrpok","executionInfo":{"status":"ok","timestamp":1660491973904,"user_tz":-330,"elapsed":568,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"aa63653b-0d9d-4966-9fd7-ad964348e1f0"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(1032, 2, 120, 120, 3, 1) (1032, 1)\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import RMSprop\n","\n","# configure the siamese network\n","print(\"[INFO] building siamese network...\")\n","imgA = Input(shape=IMG_SHAPE)\n","imgB = Input(shape=IMG_SHAPE)\n","featureExtractor = build_siamese_model(IMG_SHAPE, 32)\n","featsA = featureExtractor(imgA)\n","featsB = featureExtractor(imgB)\n","\n","# finally, construct the siamese network\n","distance = Lambda(euclidean_distance)([featsA, featsB])\n","# outputs = Dense(16, activation=\"relu\")(distance)\n","outputs = Dense(1, activation=\"sigmoid\")(distance)\n","model = Model(inputs=[imgA, imgB], outputs=outputs, name=\"SNN_model\")\n","\n","# compile the model\n","print(\"[INFO] compiling model...\")\n","model.compile(loss=contrastive_loss, \n","              optimizer=\"adam\", \n","              metrics=[\"accuracy\"])\n","# model.compile(loss=contrastive_loss, optimizer=\"adam\", metrics=[\"accuracy\"])\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSZTxKWptro8","executionInfo":{"status":"ok","timestamp":1660496342157,"user_tz":-330,"elapsed":926,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"23e900c7-1e8e-4d9e-93d9-1a9c1763bda0"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] building siamese network...\n","[INFO] compiling model...\n","Model: \"SNN_model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_28 (InputLayer)          [(None, 120, 120, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," input_29 (InputLayer)          [(None, 120, 120, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," model_7 (Functional)           (None, 32)           14788976    ['input_28[0][0]',               \n","                                                                  'input_29[0][0]']               \n","                                                                                                  \n"," lambda_6 (Lambda)              (None, 1)            0           ['model_7[0][0]',                \n","                                                                  'model_7[1][0]']                \n","                                                                                                  \n"," dense_23 (Dense)               (None, 1)            2           ['lambda_6[0][0]']               \n","                                                                                                  \n","==================================================================================================\n","Total params: 14,788,978\n","Trainable params: 74,290\n","Non-trainable params: 14,714,688\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# train the model\n","print(\"[INFO] training model...\")\n","history = model.fit(\n","\t[pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:],\n","\tvalidation_split=0.20,\n","\tbatch_size=BATCH_SIZE, \n","\tshuffle=True,\n","\tepochs=EPOCHS)\n","\n","# serialize the model to disk\n","print(\"[INFO] saving siamese model...\")\n","model.save(MODEL_PATH)\n","\n","# plot the training history\n","print(\"[INFO] plotting training history...\")\n","plot_training(history, PLOT_PATH)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"jBtuHRRzs8yx","executionInfo":{"status":"ok","timestamp":1660496728681,"user_tz":-330,"elapsed":383259,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"7691d827-0f08-45b0-87ab-8405f4ced3b3"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] training model...\n","Epoch 1/100\n","33/33 [==============================] - 5s 131ms/step - loss: 0.2559 - accuracy: 0.5079 - val_loss: 0.2513 - val_accuracy: 0.5169\n","Epoch 2/100\n","33/33 [==============================] - 4s 112ms/step - loss: 0.2228 - accuracy: 0.5079 - val_loss: 0.2397 - val_accuracy: 0.5169\n","Epoch 3/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.2028 - accuracy: 0.5103 - val_loss: 0.2381 - val_accuracy: 0.5169\n","Epoch 4/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.1912 - accuracy: 0.5224 - val_loss: 0.2350 - val_accuracy: 0.5217\n","Epoch 5/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.1803 - accuracy: 0.5697 - val_loss: 0.2383 - val_accuracy: 0.5266\n","Epoch 6/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.1707 - accuracy: 0.6255 - val_loss: 0.2363 - val_accuracy: 0.5411\n","Epoch 7/100\n","33/33 [==============================] - 4s 117ms/step - loss: 0.1627 - accuracy: 0.6642 - val_loss: 0.2377 - val_accuracy: 0.5411\n","Epoch 8/100\n","33/33 [==============================] - 4s 118ms/step - loss: 0.1544 - accuracy: 0.7418 - val_loss: 0.2346 - val_accuracy: 0.5604\n","Epoch 9/100\n","33/33 [==============================] - 4s 119ms/step - loss: 0.1498 - accuracy: 0.7552 - val_loss: 0.2395 - val_accuracy: 0.5556\n","Epoch 10/100\n","33/33 [==============================] - 4s 120ms/step - loss: 0.1429 - accuracy: 0.8170 - val_loss: 0.2399 - val_accuracy: 0.5894\n","Epoch 11/100\n","33/33 [==============================] - 4s 119ms/step - loss: 0.1390 - accuracy: 0.8206 - val_loss: 0.2358 - val_accuracy: 0.5556\n","Epoch 12/100\n","33/33 [==============================] - 4s 117ms/step - loss: 0.1317 - accuracy: 0.8812 - val_loss: 0.2355 - val_accuracy: 0.5652\n","Epoch 13/100\n","33/33 [==============================] - 4s 117ms/step - loss: 0.1266 - accuracy: 0.8921 - val_loss: 0.2338 - val_accuracy: 0.5749\n","Epoch 14/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.1220 - accuracy: 0.9115 - val_loss: 0.2354 - val_accuracy: 0.5894\n","Epoch 15/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.1166 - accuracy: 0.9370 - val_loss: 0.2396 - val_accuracy: 0.5845\n","Epoch 16/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.1128 - accuracy: 0.9418 - val_loss: 0.2368 - val_accuracy: 0.5990\n","Epoch 17/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.1080 - accuracy: 0.9600 - val_loss: 0.2409 - val_accuracy: 0.6087\n","Epoch 18/100\n","33/33 [==============================] - 4s 130ms/step - loss: 0.1052 - accuracy: 0.9624 - val_loss: 0.2382 - val_accuracy: 0.6184\n","Epoch 19/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.1022 - accuracy: 0.9600 - val_loss: 0.2351 - val_accuracy: 0.6184\n","Epoch 20/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0989 - accuracy: 0.9709 - val_loss: 0.2349 - val_accuracy: 0.6329\n","Epoch 21/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0955 - accuracy: 0.9842 - val_loss: 0.2331 - val_accuracy: 0.6184\n","Epoch 22/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0906 - accuracy: 0.9830 - val_loss: 0.2325 - val_accuracy: 0.6329\n","Epoch 23/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0877 - accuracy: 0.9806 - val_loss: 0.2293 - val_accuracy: 0.6377\n","Epoch 24/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0873 - accuracy: 0.9855 - val_loss: 0.2377 - val_accuracy: 0.6087\n","Epoch 25/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0834 - accuracy: 0.9891 - val_loss: 0.2360 - val_accuracy: 0.6377\n","Epoch 26/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0798 - accuracy: 0.9879 - val_loss: 0.2288 - val_accuracy: 0.6473\n","Epoch 27/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0752 - accuracy: 0.9939 - val_loss: 0.2315 - val_accuracy: 0.6377\n","Epoch 28/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0746 - accuracy: 0.9927 - val_loss: 0.2299 - val_accuracy: 0.6715\n","Epoch 29/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0714 - accuracy: 0.9939 - val_loss: 0.2293 - val_accuracy: 0.6473\n","Epoch 30/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0689 - accuracy: 0.9952 - val_loss: 0.2293 - val_accuracy: 0.6618\n","Epoch 31/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0675 - accuracy: 0.9939 - val_loss: 0.2316 - val_accuracy: 0.6667\n","Epoch 32/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0659 - accuracy: 0.9976 - val_loss: 0.2312 - val_accuracy: 0.6667\n","Epoch 33/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0613 - accuracy: 0.9964 - val_loss: 0.2312 - val_accuracy: 0.6618\n","Epoch 34/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0588 - accuracy: 0.9964 - val_loss: 0.2307 - val_accuracy: 0.6667\n","Epoch 35/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0579 - accuracy: 0.9976 - val_loss: 0.2292 - val_accuracy: 0.6667\n","Epoch 36/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0554 - accuracy: 0.9976 - val_loss: 0.2317 - val_accuracy: 0.6425\n","Epoch 37/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0552 - accuracy: 0.9988 - val_loss: 0.2303 - val_accuracy: 0.6763\n","Epoch 38/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0529 - accuracy: 0.9988 - val_loss: 0.2282 - val_accuracy: 0.6618\n","Epoch 39/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0513 - accuracy: 0.9964 - val_loss: 0.2251 - val_accuracy: 0.6763\n","Epoch 40/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0468 - accuracy: 0.9988 - val_loss: 0.2282 - val_accuracy: 0.6667\n","Epoch 41/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0462 - accuracy: 0.9988 - val_loss: 0.2274 - val_accuracy: 0.6812\n","Epoch 42/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0456 - accuracy: 0.9988 - val_loss: 0.2288 - val_accuracy: 0.6763\n","Epoch 43/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0439 - accuracy: 0.9988 - val_loss: 0.2333 - val_accuracy: 0.6570\n","Epoch 44/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0432 - accuracy: 0.9988 - val_loss: 0.2300 - val_accuracy: 0.6860\n","Epoch 45/100\n","33/33 [==============================] - 4s 113ms/step - loss: 0.0407 - accuracy: 0.9988 - val_loss: 0.2286 - val_accuracy: 0.6812\n","Epoch 46/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0388 - accuracy: 1.0000 - val_loss: 0.2260 - val_accuracy: 0.6812\n","Epoch 47/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0388 - accuracy: 0.9988 - val_loss: 0.2312 - val_accuracy: 0.6715\n","Epoch 48/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0377 - accuracy: 0.9988 - val_loss: 0.2267 - val_accuracy: 0.6908\n","Epoch 49/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0360 - accuracy: 1.0000 - val_loss: 0.2283 - val_accuracy: 0.6957\n","Epoch 50/100\n","33/33 [==============================] - 4s 114ms/step - loss: 0.0347 - accuracy: 1.0000 - val_loss: 0.2270 - val_accuracy: 0.6957\n","Epoch 51/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0338 - accuracy: 1.0000 - val_loss: 0.2281 - val_accuracy: 0.6908\n","Epoch 52/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0326 - accuracy: 1.0000 - val_loss: 0.2289 - val_accuracy: 0.6618\n","Epoch 53/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0309 - accuracy: 1.0000 - val_loss: 0.2288 - val_accuracy: 0.6908\n","Epoch 54/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0301 - accuracy: 1.0000 - val_loss: 0.2319 - val_accuracy: 0.6667\n","Epoch 55/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0304 - accuracy: 1.0000 - val_loss: 0.2328 - val_accuracy: 0.6812\n","Epoch 56/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0303 - accuracy: 1.0000 - val_loss: 0.2259 - val_accuracy: 0.7005\n","Epoch 57/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0282 - accuracy: 1.0000 - val_loss: 0.2317 - val_accuracy: 0.6908\n","Epoch 58/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0270 - accuracy: 1.0000 - val_loss: 0.2265 - val_accuracy: 0.6908\n","Epoch 59/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0271 - accuracy: 1.0000 - val_loss: 0.2306 - val_accuracy: 0.6812\n","Epoch 60/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0260 - accuracy: 1.0000 - val_loss: 0.2288 - val_accuracy: 0.6908\n","Epoch 61/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0244 - accuracy: 1.0000 - val_loss: 0.2270 - val_accuracy: 0.6908\n","Epoch 62/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0235 - accuracy: 1.0000 - val_loss: 0.2342 - val_accuracy: 0.7005\n","Epoch 63/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0235 - accuracy: 1.0000 - val_loss: 0.2269 - val_accuracy: 0.7150\n","Epoch 64/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0225 - accuracy: 1.0000 - val_loss: 0.2269 - val_accuracy: 0.7005\n","Epoch 65/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0218 - accuracy: 1.0000 - val_loss: 0.2293 - val_accuracy: 0.7005\n","Epoch 66/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0215 - accuracy: 1.0000 - val_loss: 0.2278 - val_accuracy: 0.7005\n","Epoch 67/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0213 - accuracy: 1.0000 - val_loss: 0.2353 - val_accuracy: 0.6908\n","Epoch 68/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0208 - accuracy: 1.0000 - val_loss: 0.2314 - val_accuracy: 0.6812\n","Epoch 69/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0198 - accuracy: 1.0000 - val_loss: 0.2313 - val_accuracy: 0.7005\n","Epoch 70/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0186 - accuracy: 1.0000 - val_loss: 0.2308 - val_accuracy: 0.6908\n","Epoch 71/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0182 - accuracy: 1.0000 - val_loss: 0.2309 - val_accuracy: 0.7053\n","Epoch 72/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0176 - accuracy: 1.0000 - val_loss: 0.2294 - val_accuracy: 0.7005\n","Epoch 73/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0174 - accuracy: 1.0000 - val_loss: 0.2279 - val_accuracy: 0.7053\n","Epoch 74/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0169 - accuracy: 1.0000 - val_loss: 0.2293 - val_accuracy: 0.7005\n","Epoch 75/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0165 - accuracy: 1.0000 - val_loss: 0.2288 - val_accuracy: 0.7053\n","Epoch 76/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0169 - accuracy: 1.0000 - val_loss: 0.2300 - val_accuracy: 0.7101\n","Epoch 77/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0161 - accuracy: 1.0000 - val_loss: 0.2277 - val_accuracy: 0.6957\n","Epoch 78/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0155 - accuracy: 1.0000 - val_loss: 0.2248 - val_accuracy: 0.7198\n","Epoch 79/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0150 - accuracy: 1.0000 - val_loss: 0.2294 - val_accuracy: 0.7053\n","Epoch 80/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0157 - accuracy: 1.0000 - val_loss: 0.2286 - val_accuracy: 0.7198\n","Epoch 81/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0147 - accuracy: 1.0000 - val_loss: 0.2297 - val_accuracy: 0.6957\n","Epoch 82/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0140 - accuracy: 1.0000 - val_loss: 0.2281 - val_accuracy: 0.7005\n","Epoch 83/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0138 - accuracy: 1.0000 - val_loss: 0.2303 - val_accuracy: 0.6957\n","Epoch 84/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0133 - accuracy: 1.0000 - val_loss: 0.2274 - val_accuracy: 0.7150\n","Epoch 85/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0125 - accuracy: 1.0000 - val_loss: 0.2248 - val_accuracy: 0.7101\n","Epoch 86/100\n","33/33 [==============================] - 4s 116ms/step - loss: 0.0122 - accuracy: 1.0000 - val_loss: 0.2296 - val_accuracy: 0.7101\n","Epoch 87/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0121 - accuracy: 1.0000 - val_loss: 0.2284 - val_accuracy: 0.6957\n","Epoch 88/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0118 - accuracy: 1.0000 - val_loss: 0.2271 - val_accuracy: 0.7053\n","Epoch 89/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0118 - accuracy: 1.0000 - val_loss: 0.2312 - val_accuracy: 0.6957\n","Epoch 90/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0117 - accuracy: 1.0000 - val_loss: 0.2285 - val_accuracy: 0.7150\n","Epoch 91/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0112 - accuracy: 1.0000 - val_loss: 0.2233 - val_accuracy: 0.7246\n","Epoch 92/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0112 - accuracy: 1.0000 - val_loss: 0.2260 - val_accuracy: 0.7198\n","Epoch 93/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0109 - accuracy: 1.0000 - val_loss: 0.2258 - val_accuracy: 0.7198\n","Epoch 94/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0102 - accuracy: 1.0000 - val_loss: 0.2274 - val_accuracy: 0.7101\n","Epoch 95/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0099 - accuracy: 1.0000 - val_loss: 0.2272 - val_accuracy: 0.7053\n","Epoch 96/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0100 - accuracy: 1.0000 - val_loss: 0.2258 - val_accuracy: 0.7150\n","Epoch 97/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0096 - accuracy: 1.0000 - val_loss: 0.2256 - val_accuracy: 0.7198\n","Epoch 98/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0095 - accuracy: 1.0000 - val_loss: 0.2279 - val_accuracy: 0.7053\n","Epoch 99/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0092 - accuracy: 1.0000 - val_loss: 0.2267 - val_accuracy: 0.7198\n","Epoch 100/100\n","33/33 [==============================] - 4s 115ms/step - loss: 0.0087 - accuracy: 1.0000 - val_loss: 0.2285 - val_accuracy: 0.7246\n","[INFO] saving siamese model...\n","[INFO] plotting training history...\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.evaluate([pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pt8sg48Lj3Eg","executionInfo":{"status":"ok","timestamp":1660496813028,"user_tz":-330,"elapsed":11385,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"59ac9bcb-7e3e-4050-ee0f-3d6404dd1b81"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["33/33 [==============================] - 6s 129ms/step - loss: 0.0525 - accuracy: 0.9448\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.05246943607926369, 0.944767415523529]"]},"metadata":{},"execution_count":50}]},{"cell_type":"code","source":["!cp -r output/ drive/MyDrive/LJMU_MSc_6months/iteration1/output/"],"metadata":{"id":"b2DTHw8Hu53T","executionInfo":{"status":"ok","timestamp":1660384038353,"user_tz":-330,"elapsed":570,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["# Test the model on Test data\n","\n","# Prepare the test data\n","test_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/test/farenback_of\"\n","test_files = os.listdir(test_path)\n","print (len(test_files))\n","\n","test_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/test_data.csv\")\n","test_csv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":224},"id":"eEBoAXbEdzQm","executionInfo":{"status":"ok","timestamp":1660494189728,"user_tz":-330,"elapsed":2173,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"d47ff64c-4b62-4c09-eb7d-190bf787e501"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["49\n"]},{"output_type":"execute_result","data":{"text/plain":["                                      image_seq_path  image_seq_length  \\\n","0  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","1  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","2  CK+/extended-cohn-kanade-images/cohn-kanade-im...                11   \n","3  CK+/extended-cohn-kanade-images/cohn-kanade-im...                71   \n","4  CK+/extended-cohn-kanade-images/cohn-kanade-im...                21   \n","\n","   target            first_image             last_image  \n","0     1.0  S100_005_00000001.png  S100_005_00000023.png  \n","1     1.0  S113_008_00000001.png  S113_008_00000023.png  \n","2     1.0  S066_005_00000001.png  S066_005_00000011.png  \n","3     1.0  S503_001_00000001.png  S503_001_00000071.png  \n","4     1.0  S050_004_00000001.png  S050_004_00000021.png  "],"text/html":["\n","  <div id=\"df-6dc9e3c1-ae1f-4f3e-97ff-ed2fa8ca027c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_seq_path</th>\n","      <th>image_seq_length</th>\n","      <th>target</th>\n","      <th>first_image</th>\n","      <th>last_image</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S100_005_00000001.png</td>\n","      <td>S100_005_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S113_008_00000001.png</td>\n","      <td>S113_008_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>11</td>\n","      <td>1.0</td>\n","      <td>S066_005_00000001.png</td>\n","      <td>S066_005_00000011.png</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>71</td>\n","      <td>1.0</td>\n","      <td>S503_001_00000001.png</td>\n","      <td>S503_001_00000071.png</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>21</td>\n","      <td>1.0</td>\n","      <td>S050_004_00000001.png</td>\n","      <td>S050_004_00000021.png</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dc9e3c1-ae1f-4f3e-97ff-ed2fa8ca027c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6dc9e3c1-ae1f-4f3e-97ff-ed2fa8ca027c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6dc9e3c1-ae1f-4f3e-97ff-ed2fa8ca027c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["test_csv[\"of_img\"] = test_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","test_csv[\"of_img\"].sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTvJsbzPexD9","executionInfo":{"status":"ok","timestamp":1660494195550,"user_tz":-330,"elapsed":3,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"a1d5057e-d3df-49cb-e8ac-5e8131fb43f6"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6     S045_005.png\n","27    S062_001.png\n","41    S113_003.png\n","47    S087_001.png\n","28    S127_004.png\n","Name: of_img, dtype: object"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["test_X = None\n","test_y = None\n","first_round = True\n","for fl in test_files:\n","  img = cv2.imread(os.path.join(test_path, fl))\n","  img = cv2.resize(img, (120, 120))\n","  target = test_csv[test_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    test_X = [img]\n","    test_y = [target]\n","    first_round = False\n","  else:\n","    test_X = np.append(test_X,[img], axis=0)\n","    test_y = np.append(test_y, [target], axis=0)"],"metadata":{"id":"ViSfC0zjfkji","executionInfo":{"status":"ok","timestamp":1660494240376,"user_tz":-330,"elapsed":36256,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["print (test_X.shape, test_y.shape)\n","\n","plt.imshow(test_X[0])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"j-9S8UG2gACm","executionInfo":{"status":"ok","timestamp":1660494240376,"user_tz":-330,"elapsed":39,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"b6edecd0-03c9-4fb9-8fa5-107ed428f52f"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["(49, 120, 120, 3) (49,)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_y = test_y.astype(int)\n","np.unique(test_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hd8PnB7RgFfO","executionInfo":{"status":"ok","timestamp":1660494240377,"user_tz":-330,"elapsed":36,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"85eca741-842a-4ae9-b537-d08b6a66c867"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6])"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["# convert values to 0-1 range\n","X = test_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)"],"metadata":{"id":"8eeu0K_eUx-t"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTest, labelTest) = make_pairs(X, test_y)\n","\n","print (pairTest.shape, labelTest.shape)\n","\n","model.evaluate([pairTest[:, 0], pairTest[:, 1]], labelTest[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRmcBMZagNmN","executionInfo":{"status":"ok","timestamp":1660496854283,"user_tz":-330,"elapsed":1400,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"107343fa-4b5a-4545-8fa6-eb11411912fa"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(98, 2, 120, 120, 3, 1) (98, 1)\n","4/4 [==============================] - 1s 341ms/step - loss: 0.3170 - accuracy: 0.5918\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.31695374846458435, 0.5918367505073547]"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":["inst = pairTrain[:, 0][0].reshape((1,120,120,3,1))\n","print (inst.shape)\n","featureExtractor.predict(inst)"],"metadata":{"id":"wFCUbfJTNMrt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Save featureExtractor model\n","featureExtractor.save(\"drive/MyDrive/LJMU_MSc_6months/iteration1/output/fetureExtractor\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faCnVY1pUpkn","executionInfo":{"status":"ok","timestamp":1660384180038,"user_tz":-330,"elapsed":1687,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"53bdd11a-a6e5-4225-e809-1dbd3ca2ff4d"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]}]},{"cell_type":"code","source":["## Save the pair and Label data\n","\n","# for train data\n","np.save(\"pairTrain\",pairTrain)\n","np.save(\"labelTrain\",labelTrain)\n","\n","# for test data\n","np.save(\"pairTest\",pairTest)\n","np.save(\"labelTest\",labelTest)"],"metadata":{"id":"jTfQV0CBUpq_","executionInfo":{"status":"ok","timestamp":1660384190035,"user_tz":-330,"elapsed":2573,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["!mv pairTrain.npy labelTrain.npy pairTest.npy labelTest.npy drive/MyDrive/LJMU_MSc_6months/iteration1/output/"],"metadata":{"id":"Nt9CQaajVdlc","executionInfo":{"status":"ok","timestamp":1660384196223,"user_tz":-330,"elapsed":3731,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["featureExtractor.summary()"],"metadata":{"id":"KD7OUoDnWGZz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1660384211430,"user_tz":-330,"elapsed":642,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"f547fec3-3c62-487c-f51d-1c6adaa2b473"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"model\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," input_3 (InputLayer)        [(None, 120, 120, 3)]     0         \n","                                                                 \n"," conv2d (Conv2D)             (None, 120, 120, 16)      208       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 60, 60, 16)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 60, 60, 16)        1040      \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 30, 30, 16)       0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 14400)             0         \n","                                                                 \n"," dense (Dense)               (None, 32)                460832    \n","                                                                 \n"," dense_1 (Dense)             (None, 32)                1056      \n","                                                                 \n","=================================================================\n","Total params: 463,136\n","Trainable params: 463,136\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]}]}