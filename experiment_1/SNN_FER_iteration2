{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"SNN_FER","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOoHJRjt5LdzwZRWGKmqTTM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard","accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"KR7PsFJKRvGO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658061934125,"user_tz":-330,"elapsed":26795,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"f77714ce-39d9-49f1-a532-6c917ed36055"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","\n","drive.mount(\"/content/drive\")"]},{"cell_type":"code","source":["import os\n","import pandas as pd\n","import cv2\n","import numpy as np\n","\n","train_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/train/farenback_of\"\n","train_files = os.listdir(train_path)\n","print (len(train_files))\n","\n","train_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/train_aug.csv\")\n","train_csv[\"of_img\"] = train_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","\n","train_X = None\n","train_y = None\n","first_round = True\n","for fl in train_files:\n","  img = cv2.imread(os.path.join(train_path, fl))\n","  img = cv2.resize(img, (100, 100))\n","  target = train_csv[train_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    train_X = [img]\n","    train_y = [target]\n","    first_round = False\n","  else:\n","    train_X = np.append(train_X,[img], axis=0)\n","    train_y = np.append(train_y, [target], axis=0)\n","\n","del train_csv, train_path, train_files\n","train_X.shape, train_y.shape"],"metadata":{"id":"6biZEJN6RwyE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1658063450708,"user_tz":-330,"elapsed":14977,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"6b0fb79a-0aaf-4e97-e64e-b97cd43ad495"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["516\n"]},{"output_type":"execute_result","data":{"text/plain":["((516, 100, 100, 3), (516,))"]},"metadata":{},"execution_count":1}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import random\n","%matplotlib inline \n","\n","## Check the image data\n","plt.imshow(train_X[random.randint(0,500)])\n","plt.show()\n","\n","## check the target data\n","print (np.unique(train_y))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"gBt9ck-7qnsJ","executionInfo":{"status":"ok","timestamp":1658063450709,"user_tz":-330,"elapsed":13,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"2bf38c90-1eef-4b95-d927-8fa07dfb4ba8"},"execution_count":2,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["[0 1 2 3 4 5 6]\n"]}]},{"cell_type":"code","source":["# %%writefile config.py\n","\n","# import the necessary packages\n","import os\n","# specify the shape of the inputs for our network\n","IMG_SHAPE = (100, 100, 3)\n","# specify the batch size and number of epochs\n","BATCH_SIZE = 30\n","EPOCHS = 100\n","\n","# define the path to the base output directory\n","BASE_OUTPUT = \"output\"\n","# use the base output path to derive the path to the serialized\n","# model along with training history plot\n","MODEL_PATH = os.path.sep.join([BASE_OUTPUT, \"siamese_model\"])\n","PLOT_PATH = os.path.sep.join([BASE_OUTPUT, \"plot.png\"])"],"metadata":{"id":"5BNoAelmqea0","executionInfo":{"status":"ok","timestamp":1658063450710,"user_tz":-330,"elapsed":10,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# %%writefile utils.py\n","\n","# import the necessary packages\n","import tensorflow.keras.backend as K\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import tensorflow as tf\n","\n","def make_pairs(images, labels):\n","\t# initialize two empty lists to hold the (image, image) pairs and\n","\t# labels to indicate if a pair is positive or negative\n","\tpairImages = []\n","\tpairLabels = []\n","\t# calculate the total number of classes present in the dataset\n","\t# and then build a list of indexes for each class label that\n","\t# provides the indexes for all examples with a given label\n","\tnumClasses = len(np.unique(labels))\n","\tidx = [np.where(labels == i)[0] for i in range(0, numClasses)]\n","\t# loop over all images\n","\tfor idxA in range(len(images)):\n","\t\t# grab the current image and label belonging to the current\n","\t\t# iteration\n","\t\tcurrentImage = images[idxA]\n","\t\tlabel = labels[idxA]\n","\t\t# randomly pick an image that belongs to the *same* class\n","\t\t# label\n","\t\tidxB = np.random.choice(idx[label])\n","\t\tposImage = images[idxB]\n","\t\t# prepare a positive pair and update the images and labels\n","\t\t# lists, respectively\n","\t\tpairImages.append([currentImage, posImage])\n","\t\tpairLabels.append([1])\n","\t\t# grab the indices for each of the class labels *not* equal to\n","\t\t# the current label and randomly pick an image corresponding\n","\t\t# to a label *not* equal to the current label\n","\t\tnegIdx = np.where(labels != label)[0]\n","\t\tnegImage = images[np.random.choice(negIdx)]\n","\t\t# prepare a negative pair of images and update our lists\n","\t\tpairImages.append([currentImage, negImage])\n","\t\tpairLabels.append([0])\n","\t# return a 2-tuple of our image pairs and labels\n","\treturn (np.array(pairImages), np.array(pairLabels))\n","\n","\n","def euclidean_distance(vectors):\n","\t# unpack the vectors into separate lists\n","\t(featsA, featsB) = vectors\n","\t# compute the sum of squared distances between the vectors\n","\tsumSquared = K.sum(K.square(featsA - featsB), axis=1,\n","\t\tkeepdims=True)\n","\t# return the euclidean distance between the vectors\n","\treturn K.sqrt(K.maximum(sumSquared, K.epsilon()))\n","\n","\n","def contrastive_loss(y, preds, margin=1):\n","\t# explicitly cast the true class label data type to the predicted\n","\t# class label data type (otherwise we run the risk of having two\n","\t# separate data types, causing TensorFlow to error out)\n","\ty = tf.cast(y, preds.dtype)\n","\t# calculate the contrastive loss between the true labels and\n","\t# the predicted labels\n","\tsquaredPreds = K.square(preds)\n","\tsquaredMargin = K.square(K.maximum(margin - preds, 0))\n","\tloss = K.mean(y * squaredMargin + (1 - y) * squaredPreds)\n","\t# return the computed contrastive loss to the calling function\n","\treturn loss\n","\n","def plot_training(H, plotPath):\n","\t# construct a plot that plots and saves the training history\n","\tplt.style.use(\"ggplot\")\n","\tplt.figure()\n","\tplt.plot(H.history[\"loss\"], label=\"train_loss\")\n","\tplt.plot(H.history[\"val_loss\"], label=\"val_loss\")\n","\tplt.plot(H.history[\"accuracy\"], label=\"train_acc\")\n","\tplt.plot(H.history[\"val_accuracy\"], label=\"val_acc\")\n","\tplt.title(\"Training Loss and Accuracy\")\n","\tplt.xlabel(\"Epoch #\")\n","\tplt.ylabel(\"Loss/Accuracy\")\n","\tplt.legend(loc=\"lower left\")\n","\tplt.savefig(plotPath)"],"metadata":{"id":"mbTKhwWNrc76","executionInfo":{"status":"ok","timestamp":1658063463525,"user_tz":-330,"elapsed":7357,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Conv2D\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Dropout\n","from tensorflow.keras.layers import GlobalAveragePooling2D, Flatten\n","from tensorflow.keras.layers import MaxPooling2D\n","# from tensorflow.keras.applications import VGG16\n","\n","def build_siamese_model(inputShape, embeddingDim=48):\n","\n","\t# # create the base pre-trained model\n","\t# pretrained_model = VGG16(\n","\t# \t\t\t\t\t\t\t\t\tinclude_top=False,\n","\t# \t\t\t\t\t\t\t\t\tinput_shape=inputShape,\n","\t# \t\t\t\t\t\t\t\t\tpooling='avg',\n","\t# \t\t\t\t\t\t\t\t\tclasses=7,\n","\t# \t\t\t\t\t\t\t\t\tweights='imagenet')\n"," \n"," # first: train only the top layers (which were randomly initialized)\n","\t# i.e. freeze all convolutional \n","\t# for layer in pretrained_model.layers:\n","\t# \tlayer.trainable = False\n","\n","\t# # specify the inputs for the feature extractor network\n","\tinputs = Input(inputShape)\n","\t# define the first set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(inputs)\n","\tx = MaxPooling2D(pool_size=(2, 2))(x)\n","\tx = Dropout(0.3)(x)\n","\t# second set of CONV => RELU => POOL => DROPOUT layers\n","\tx = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\tx = MaxPooling2D(pool_size=2)(x)\n","\tx = Dropout(0.3)(x)\n","\t# # third set of CONV => RELU => POOL => DROPOUT layers\n","\t# x = Conv2D(32, (2, 2), padding=\"same\", activation=\"relu\")(x)\n","\t# x = MaxPooling2D(pool_size=2)(x)\n","\t# x = Dropout(0.3)(x)\n","\n","\n","\t# prepare the final outputs\n","\n","\tx = Flatten()(x) \n","\t# x = GlobalAveragePooling2D()(x)\n","\tx = Dense(8, activation=\"relu\")(x)\n","\tx = Dropout(0.2)(x)\n","\t# x = Dense(16, activation=\"relu\")(x)\n","\t# x = Dropout(0.2)(x)\n","\t# x = Dense(32, activation=\"relu\")(x)\n","\t# x = Dropout(0.2)(x)\n","\toutputs = Dense(embeddingDim)(x)\n","\t# build the model\n","\tmodel = Model(inputs, outputs)\n","\t\n","\t# return the model to the calling function\n","\treturn model"],"metadata":{"id":"FvnM8aLec_uB","executionInfo":{"status":"ok","timestamp":1658063904699,"user_tz":-330,"elapsed":572,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# import the necessary packages\n","# from siamese_network import build_siamese_model\n","# import config\n","# import utils\n","from tensorflow.keras.models import Model\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.layers import Input\n","from tensorflow.keras.layers import Lambda\n","import numpy as np\n","\n","\n","# convert values to 0-1 range\n","X = train_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTrain, labelTrain) = make_pairs(X, train_y)\n","# (pairTest, labelTest) = utils.make_pairs(testX, testY)\n","\n","del train_X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rNErRi6rrpok","executionInfo":{"status":"ok","timestamp":1658063532176,"user_tz":-330,"elapsed":878,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"1e7dafd4-df2c-412f-ac8d-ccec224de594"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n"]}]},{"cell_type":"code","source":["from tensorflow.keras.optimizers import RMSprop\n","\n","# configure the siamese network\n","print(\"[INFO] building siamese network...\")\n","imgA = Input(shape=IMG_SHAPE)\n","imgB = Input(shape=IMG_SHAPE)\n","featureExtractor = build_siamese_model(IMG_SHAPE, 64)\n","featsA = featureExtractor(imgA)\n","featsB = featureExtractor(imgB)\n","\n","# finally, construct the siamese network\n","distance = Lambda(euclidean_distance)([featsA, featsB])\n","# outputs = Dense(16, activation=\"relu\")(distance)\n","outputs = Dense(1, activation=\"sigmoid\")(distance)\n","model = Model(inputs=[imgA, imgB], outputs=outputs, name=\"SNN_model\")\n","\n","# compile the model\n","print(\"[INFO] compiling model...\")\n","model.compile(loss=contrastive_loss, \n","              optimizer=\"rmsprop\", \n","              metrics=[\"accuracy\"])\n","# model.compile(loss=contrastive_loss, optimizer=\"adam\", metrics=[\"accuracy\"])\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aSZTxKWptro8","executionInfo":{"status":"ok","timestamp":1658063912104,"user_tz":-330,"elapsed":17,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"5bece8c7-4ede-4fd4-ad70-cc4d1b1f0dff"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] building siamese network...\n","[INFO] compiling model...\n","Model: \"SNN_model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_13 (InputLayer)          [(None, 100, 100, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," input_14 (InputLayer)          [(None, 100, 100, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," model_4 (Functional)           (None, 64)           165128      ['input_13[0][0]',               \n","                                                                  'input_14[0][0]']               \n","                                                                                                  \n"," lambda_4 (Lambda)              (None, 1)            0           ['model_4[0][0]',                \n","                                                                  'model_4[1][0]']                \n","                                                                                                  \n"," dense_14 (Dense)               (None, 1)            2           ['lambda_4[0][0]']               \n","                                                                                                  \n","==================================================================================================\n","Total params: 165,130\n","Trainable params: 165,130\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["# train the model\n","print(\"[INFO] training model...\")\n","history = model.fit(\n","\t[pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:],\n","\tvalidation_split=0.20,\n","\tbatch_size=BATCH_SIZE, \n","\tepochs=EPOCHS)\n","\n","# serialize the model to disk\n","print(\"[INFO] saving siamese model...\")\n","model.save(MODEL_PATH)\n","\n","# plot the training history\n","print(\"[INFO] plotting training history...\")\n","plot_training(history, PLOT_PATH)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"jBtuHRRzs8yx","executionInfo":{"status":"ok","timestamp":1658063979274,"user_tz":-330,"elapsed":60709,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"ee136159-e4e2-4e43-edd8-de7eb159ac4a"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] training model...\n","Epoch 1/100\n","28/28 [==============================] - 2s 29ms/step - loss: 0.2513 - accuracy: 0.5382 - val_loss: 0.2494 - val_accuracy: 0.5362\n","Epoch 2/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2439 - accuracy: 0.5370 - val_loss: 0.2412 - val_accuracy: 0.6039\n","Epoch 3/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2379 - accuracy: 0.5818 - val_loss: 0.2408 - val_accuracy: 0.5700\n","Epoch 4/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2363 - accuracy: 0.5879 - val_loss: 0.2335 - val_accuracy: 0.5894\n","Epoch 5/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2332 - accuracy: 0.6036 - val_loss: 0.2329 - val_accuracy: 0.6232\n","Epoch 6/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2299 - accuracy: 0.6230 - val_loss: 0.2263 - val_accuracy: 0.6039\n","Epoch 7/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2238 - accuracy: 0.6315 - val_loss: 0.2266 - val_accuracy: 0.6232\n","Epoch 8/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2207 - accuracy: 0.6448 - val_loss: 0.2287 - val_accuracy: 0.6039\n","Epoch 9/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2204 - accuracy: 0.6642 - val_loss: 0.2266 - val_accuracy: 0.6570\n","Epoch 10/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2188 - accuracy: 0.6485 - val_loss: 0.2213 - val_accuracy: 0.6473\n","Epoch 11/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2143 - accuracy: 0.6691 - val_loss: 0.2273 - val_accuracy: 0.6715\n","Epoch 12/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2146 - accuracy: 0.6933 - val_loss: 0.2205 - val_accuracy: 0.6522\n","Epoch 13/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2127 - accuracy: 0.6873 - val_loss: 0.2139 - val_accuracy: 0.6425\n","Epoch 14/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2119 - accuracy: 0.7091 - val_loss: 0.2178 - val_accuracy: 0.6329\n","Epoch 15/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2072 - accuracy: 0.7055 - val_loss: 0.2178 - val_accuracy: 0.6715\n","Epoch 16/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2061 - accuracy: 0.7224 - val_loss: 0.2168 - val_accuracy: 0.6039\n","Epoch 17/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1992 - accuracy: 0.7176 - val_loss: 0.2182 - val_accuracy: 0.6522\n","Epoch 18/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2042 - accuracy: 0.7030 - val_loss: 0.2092 - val_accuracy: 0.6570\n","Epoch 19/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.2057 - accuracy: 0.7127 - val_loss: 0.2073 - val_accuracy: 0.6860\n","Epoch 20/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1965 - accuracy: 0.7297 - val_loss: 0.2072 - val_accuracy: 0.6667\n","Epoch 21/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1961 - accuracy: 0.7406 - val_loss: 0.2109 - val_accuracy: 0.6377\n","Epoch 22/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.2004 - accuracy: 0.7188 - val_loss: 0.2043 - val_accuracy: 0.6860\n","Epoch 23/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1993 - accuracy: 0.7309 - val_loss: 0.2019 - val_accuracy: 0.7246\n","Epoch 24/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1958 - accuracy: 0.7152 - val_loss: 0.2026 - val_accuracy: 0.7198\n","Epoch 25/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1916 - accuracy: 0.7382 - val_loss: 0.2026 - val_accuracy: 0.6812\n","Epoch 26/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1982 - accuracy: 0.7285 - val_loss: 0.2043 - val_accuracy: 0.6957\n","Epoch 27/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1890 - accuracy: 0.7382 - val_loss: 0.2008 - val_accuracy: 0.7005\n","Epoch 28/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1945 - accuracy: 0.7188 - val_loss: 0.1978 - val_accuracy: 0.7150\n","Epoch 29/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1901 - accuracy: 0.7406 - val_loss: 0.1938 - val_accuracy: 0.6763\n","Epoch 30/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1931 - accuracy: 0.7273 - val_loss: 0.2001 - val_accuracy: 0.7005\n","Epoch 31/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1873 - accuracy: 0.7370 - val_loss: 0.1905 - val_accuracy: 0.7246\n","Epoch 32/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1847 - accuracy: 0.7552 - val_loss: 0.1931 - val_accuracy: 0.6860\n","Epoch 33/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1911 - accuracy: 0.7479 - val_loss: 0.1905 - val_accuracy: 0.7391\n","Epoch 34/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1800 - accuracy: 0.7539 - val_loss: 0.1933 - val_accuracy: 0.6957\n","Epoch 35/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1783 - accuracy: 0.7648 - val_loss: 0.1900 - val_accuracy: 0.7101\n","Epoch 36/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1845 - accuracy: 0.7527 - val_loss: 0.1989 - val_accuracy: 0.7053\n","Epoch 37/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1822 - accuracy: 0.7442 - val_loss: 0.1946 - val_accuracy: 0.7005\n","Epoch 38/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1783 - accuracy: 0.7697 - val_loss: 0.1897 - val_accuracy: 0.7343\n","Epoch 39/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1891 - accuracy: 0.7394 - val_loss: 0.1964 - val_accuracy: 0.7246\n","Epoch 40/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1771 - accuracy: 0.7576 - val_loss: 0.1906 - val_accuracy: 0.7246\n","Epoch 41/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1788 - accuracy: 0.7515 - val_loss: 0.1936 - val_accuracy: 0.7053\n","Epoch 42/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1698 - accuracy: 0.7794 - val_loss: 0.1953 - val_accuracy: 0.7150\n","Epoch 43/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1763 - accuracy: 0.7491 - val_loss: 0.1883 - val_accuracy: 0.7246\n","Epoch 44/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1807 - accuracy: 0.7503 - val_loss: 0.1961 - val_accuracy: 0.7150\n","Epoch 45/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1789 - accuracy: 0.7588 - val_loss: 0.1935 - val_accuracy: 0.6957\n","Epoch 46/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1809 - accuracy: 0.7297 - val_loss: 0.2026 - val_accuracy: 0.6860\n","Epoch 47/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1714 - accuracy: 0.7673 - val_loss: 0.1964 - val_accuracy: 0.6860\n","Epoch 48/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1696 - accuracy: 0.7855 - val_loss: 0.1936 - val_accuracy: 0.7150\n","Epoch 49/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1701 - accuracy: 0.7552 - val_loss: 0.1992 - val_accuracy: 0.6957\n","Epoch 50/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1676 - accuracy: 0.7709 - val_loss: 0.1984 - val_accuracy: 0.7005\n","Epoch 51/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1653 - accuracy: 0.7673 - val_loss: 0.2012 - val_accuracy: 0.7005\n","Epoch 52/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1692 - accuracy: 0.7576 - val_loss: 0.1879 - val_accuracy: 0.7198\n","Epoch 53/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1680 - accuracy: 0.7709 - val_loss: 0.1877 - val_accuracy: 0.7101\n","Epoch 54/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1704 - accuracy: 0.7624 - val_loss: 0.1931 - val_accuracy: 0.7005\n","Epoch 55/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1655 - accuracy: 0.7612 - val_loss: 0.1956 - val_accuracy: 0.7053\n","Epoch 56/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1640 - accuracy: 0.7842 - val_loss: 0.2031 - val_accuracy: 0.7053\n","Epoch 57/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1733 - accuracy: 0.7576 - val_loss: 0.1934 - val_accuracy: 0.6860\n","Epoch 58/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1625 - accuracy: 0.7830 - val_loss: 0.1919 - val_accuracy: 0.6957\n","Epoch 59/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1681 - accuracy: 0.7733 - val_loss: 0.1935 - val_accuracy: 0.7150\n","Epoch 60/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1618 - accuracy: 0.7745 - val_loss: 0.1976 - val_accuracy: 0.6715\n","Epoch 61/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1556 - accuracy: 0.7903 - val_loss: 0.1913 - val_accuracy: 0.7101\n","Epoch 62/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1580 - accuracy: 0.7830 - val_loss: 0.1922 - val_accuracy: 0.7198\n","Epoch 63/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1622 - accuracy: 0.7697 - val_loss: 0.1958 - val_accuracy: 0.7246\n","Epoch 64/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1522 - accuracy: 0.7964 - val_loss: 0.1980 - val_accuracy: 0.7101\n","Epoch 65/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1569 - accuracy: 0.7891 - val_loss: 0.1925 - val_accuracy: 0.7101\n","Epoch 66/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1568 - accuracy: 0.7952 - val_loss: 0.1891 - val_accuracy: 0.7101\n","Epoch 67/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1572 - accuracy: 0.7842 - val_loss: 0.1909 - val_accuracy: 0.7198\n","Epoch 68/100\n","28/28 [==============================] - 1s 21ms/step - loss: 0.1511 - accuracy: 0.7988 - val_loss: 0.1872 - val_accuracy: 0.7005\n","Epoch 69/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1553 - accuracy: 0.7806 - val_loss: 0.1869 - val_accuracy: 0.7150\n","Epoch 70/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1521 - accuracy: 0.7903 - val_loss: 0.1920 - val_accuracy: 0.7101\n","Epoch 71/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1533 - accuracy: 0.7915 - val_loss: 0.1877 - val_accuracy: 0.7005\n","Epoch 72/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1521 - accuracy: 0.7867 - val_loss: 0.1818 - val_accuracy: 0.7198\n","Epoch 73/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1622 - accuracy: 0.7661 - val_loss: 0.1867 - val_accuracy: 0.7295\n","Epoch 74/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1535 - accuracy: 0.7818 - val_loss: 0.1851 - val_accuracy: 0.7005\n","Epoch 75/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1523 - accuracy: 0.7818 - val_loss: 0.1973 - val_accuracy: 0.7246\n","Epoch 76/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1554 - accuracy: 0.7794 - val_loss: 0.1918 - val_accuracy: 0.7391\n","Epoch 77/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1529 - accuracy: 0.7976 - val_loss: 0.1894 - val_accuracy: 0.7295\n","Epoch 78/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1537 - accuracy: 0.7915 - val_loss: 0.1889 - val_accuracy: 0.7295\n","Epoch 79/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1486 - accuracy: 0.7927 - val_loss: 0.1864 - val_accuracy: 0.7005\n","Epoch 80/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1573 - accuracy: 0.7855 - val_loss: 0.1988 - val_accuracy: 0.7150\n","Epoch 81/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1463 - accuracy: 0.7952 - val_loss: 0.1864 - val_accuracy: 0.7246\n","Epoch 82/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1414 - accuracy: 0.8061 - val_loss: 0.1915 - val_accuracy: 0.7150\n","Epoch 83/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1525 - accuracy: 0.7794 - val_loss: 0.1977 - val_accuracy: 0.7246\n","Epoch 84/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1460 - accuracy: 0.7952 - val_loss: 0.1869 - val_accuracy: 0.7246\n","Epoch 85/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1539 - accuracy: 0.7782 - val_loss: 0.2033 - val_accuracy: 0.7101\n","Epoch 86/100\n","28/28 [==============================] - 1s 23ms/step - loss: 0.1467 - accuracy: 0.7976 - val_loss: 0.1974 - val_accuracy: 0.7198\n","Epoch 87/100\n","28/28 [==============================] - 1s 22ms/step - loss: 0.1443 - accuracy: 0.8073 - val_loss: 0.2000 - val_accuracy: 0.7150\n","Epoch 88/100\n","28/28 [==============================] - 1s 24ms/step - loss: 0.1454 - accuracy: 0.8048 - val_loss: 0.1977 - val_accuracy: 0.6957\n","Epoch 89/100\n","28/28 [==============================] - 1s 23ms/step - loss: 0.1649 - accuracy: 0.7467 - val_loss: 0.2021 - val_accuracy: 0.7150\n","Epoch 90/100\n","28/28 [==============================] - 1s 23ms/step - loss: 0.1468 - accuracy: 0.7988 - val_loss: 0.2100 - val_accuracy: 0.7005\n","Epoch 91/100\n","28/28 [==============================] - 1s 22ms/step - loss: 0.1465 - accuracy: 0.7988 - val_loss: 0.1933 - val_accuracy: 0.7053\n","Epoch 92/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1423 - accuracy: 0.8121 - val_loss: 0.1893 - val_accuracy: 0.7005\n","Epoch 93/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1434 - accuracy: 0.8061 - val_loss: 0.2091 - val_accuracy: 0.6812\n","Epoch 94/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1439 - accuracy: 0.7988 - val_loss: 0.1908 - val_accuracy: 0.7053\n","Epoch 95/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1445 - accuracy: 0.8000 - val_loss: 0.2054 - val_accuracy: 0.7053\n","Epoch 96/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1461 - accuracy: 0.7939 - val_loss: 0.2007 - val_accuracy: 0.7150\n","Epoch 97/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1452 - accuracy: 0.7842 - val_loss: 0.1915 - val_accuracy: 0.7150\n","Epoch 98/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1431 - accuracy: 0.8036 - val_loss: 0.2066 - val_accuracy: 0.7053\n","Epoch 99/100\n","28/28 [==============================] - 1s 20ms/step - loss: 0.1518 - accuracy: 0.7745 - val_loss: 0.2085 - val_accuracy: 0.7198\n","Epoch 100/100\n","28/28 [==============================] - 1s 19ms/step - loss: 0.1541 - accuracy: 0.7842 - val_loss: 0.2061 - val_accuracy: 0.6908\n","[INFO] saving siamese model...\n","INFO:tensorflow:Assets written to: output/siamese_model/assets\n","[INFO] plotting training history...\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["model.evaluate([pairTrain[:, 0], pairTrain[:, 1]], labelTrain[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Pt8sg48Lj3Eg","executionInfo":{"status":"ok","timestamp":1658063984041,"user_tz":-330,"elapsed":1382,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"82e08b40-8e37-402c-aa9e-16d7242455fc"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["33/33 [==============================] - 0s 10ms/step - loss: 0.1340 - accuracy: 0.8333\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.13401447236537933, 0.8333333134651184]"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["!cp -r output/ drive/MyDrive/LJMU_MSc_6months/iteration2/output2/"],"metadata":{"id":"b2DTHw8Hu53T","executionInfo":{"status":"ok","timestamp":1658064071010,"user_tz":-330,"elapsed":578,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["# Test the model on Test data\n","\n","# Prepare the test data\n","test_path = \"drive/MyDrive/LJMU_MSc_6months/iteration2/test/farenback_of\"\n","test_files = os.listdir(test_path)\n","print (len(test_files))\n","\n","test_csv = pd.read_csv(\"drive/MyDrive/LJMU_MSc_6months/iteration2/test_data.csv\")\n","test_csv.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":223},"id":"eEBoAXbEdzQm","executionInfo":{"status":"ok","timestamp":1658063679135,"user_tz":-330,"elapsed":1925,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"8b50e48f-0357-4643-c218-aded86ed82fe"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["49\n"]},{"output_type":"execute_result","data":{"text/plain":["                                      image_seq_path  image_seq_length  \\\n","0  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","1  CK+/extended-cohn-kanade-images/cohn-kanade-im...                23   \n","2  CK+/extended-cohn-kanade-images/cohn-kanade-im...                11   \n","3  CK+/extended-cohn-kanade-images/cohn-kanade-im...                71   \n","4  CK+/extended-cohn-kanade-images/cohn-kanade-im...                21   \n","\n","   target            first_image             last_image  \n","0     1.0  S100_005_00000001.png  S100_005_00000023.png  \n","1     1.0  S113_008_00000001.png  S113_008_00000023.png  \n","2     1.0  S066_005_00000001.png  S066_005_00000011.png  \n","3     1.0  S503_001_00000001.png  S503_001_00000071.png  \n","4     1.0  S050_004_00000001.png  S050_004_00000021.png  "],"text/html":["\n","  <div id=\"df-4c6bceba-d4d5-430d-a059-d0d5898efba7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>image_seq_path</th>\n","      <th>image_seq_length</th>\n","      <th>target</th>\n","      <th>first_image</th>\n","      <th>last_image</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S100_005_00000001.png</td>\n","      <td>S100_005_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>23</td>\n","      <td>1.0</td>\n","      <td>S113_008_00000001.png</td>\n","      <td>S113_008_00000023.png</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>11</td>\n","      <td>1.0</td>\n","      <td>S066_005_00000001.png</td>\n","      <td>S066_005_00000011.png</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>71</td>\n","      <td>1.0</td>\n","      <td>S503_001_00000001.png</td>\n","      <td>S503_001_00000071.png</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CK+/extended-cohn-kanade-images/cohn-kanade-im...</td>\n","      <td>21</td>\n","      <td>1.0</td>\n","      <td>S050_004_00000001.png</td>\n","      <td>S050_004_00000021.png</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c6bceba-d4d5-430d-a059-d0d5898efba7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4c6bceba-d4d5-430d-a059-d0d5898efba7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4c6bceba-d4d5-430d-a059-d0d5898efba7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["test_csv[\"of_img\"] = test_csv[\"first_image\"].apply(lambda x:x.replace(\"_00000001\",\"\"))\n","test_csv[\"of_img\"].sample(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bTvJsbzPexD9","executionInfo":{"status":"ok","timestamp":1658063683277,"user_tz":-330,"elapsed":2,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"d7417142-d8ac-493c-aabf-d61346765ac8"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["22    S506_004.png\n","38    S505_006.png\n","37    S504_006.png\n","13    S149_002.png\n","3     S503_001.png\n","Name: of_img, dtype: object"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["test_X = None\n","test_y = None\n","first_round = True\n","for fl in test_files:\n","  img = cv2.imread(os.path.join(test_path, fl))\n","  img = cv2.resize(img, (100, 100))\n","  target = test_csv[test_csv[\"of_img\"] == fl][\"target\"].iloc[0] - 1\n","  if first_round: \n","    test_X = [img]\n","    test_y = [target]\n","    first_round = False\n","  else:\n","    test_X = np.append(test_X,[img], axis=0)\n","    test_y = np.append(test_y, [target], axis=0)"],"metadata":{"id":"ViSfC0zjfkji","executionInfo":{"status":"ok","timestamp":1658063726880,"user_tz":-330,"elapsed":40817,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["print (test_X.shape, test_y.shape)\n","\n","plt.imshow(test_X[0])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":285},"id":"j-9S8UG2gACm","executionInfo":{"status":"ok","timestamp":1658063726881,"user_tz":-330,"elapsed":21,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"fbeeda09-8807-41f4-f027-c479f92e22d0"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(49, 100, 100, 3) (49,)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_y = test_y.astype(int)\n","np.unique(test_y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hd8PnB7RgFfO","executionInfo":{"status":"ok","timestamp":1658063726882,"user_tz":-330,"elapsed":16,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"65f8a185-7358-467f-c19b-c1d967d6b8e0"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 2, 3, 4, 5, 6])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["# convert values to 0-1 range\n","X = test_X / 255.0 # reload train_X if running this cell again immediately\n","\n","# add a channel dimension to the images\n","X = np.expand_dims(X, axis=-1)\n","\n","# prepare the positive and negative pairs\n","print(\"[INFO] preparing positive and negative pairs...\")\n","(pairTest, labelTest) = make_pairs(X, test_y)\n","print (pairTest.shape, labelTest.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRmcBMZagNmN","executionInfo":{"status":"ok","timestamp":1658063726883,"user_tz":-330,"elapsed":14,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"63451438-cfe9-4b57-c764-1c94c01cb82a"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["[INFO] preparing positive and negative pairs...\n","(98, 2, 100, 100, 3, 1) (98, 1)\n"]}]},{"cell_type":"code","source":["model.evaluate([pairTest[:, 0], pairTest[:, 1]], labelTest[:])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJJaEB9NhADk","executionInfo":{"status":"ok","timestamp":1658063989214,"user_tz":-330,"elapsed":540,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"361c499d-0156-434c-ad47-0941f576a114"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["4/4 [==============================] - 0s 8ms/step - loss: 0.1830 - accuracy: 0.7653\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.1830175369977951, 0.7653061151504517]"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["## Save featureExtractor model\n","featureExtractor.save(\"drive/MyDrive/LJMU_MSc_6months/iteration2/output2/fetureExtractor\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"faCnVY1pUpkn","executionInfo":{"status":"ok","timestamp":1658064195206,"user_tz":-330,"elapsed":1521,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}},"outputId":"13daac99-c95a-46fb-a48d-25a961ccff36"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["WARNING:tensorflow:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n","INFO:tensorflow:Assets written to: drive/MyDrive/LJMU_MSc_6months/iteration2/output2/fetureExtractor/assets\n"]}]},{"cell_type":"code","source":["## Save the pair and Label data\n","\n","# for train data\n","np.save(\"pairTrain\",pairTrain)\n","np.save(\"labelTrain\",labelTrain)\n","\n","# for test data\n","np.save(\"pairTest\",pairTest)\n","np.save(\"labelTest\",labelTest)"],"metadata":{"id":"jTfQV0CBUpq_","executionInfo":{"status":"ok","timestamp":1658064493267,"user_tz":-330,"elapsed":2710,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["!mv pairTrain.npy labelTrain.npy pairTest.npy labelTest.npy drive/MyDrive/LJMU_MSc_6months/iteration2/output2/"],"metadata":{"id":"Nt9CQaajVdlc","executionInfo":{"status":"ok","timestamp":1658064564477,"user_tz":-330,"elapsed":3442,"user":{"displayName":"Krishna Chaithanya Movva","userId":"08822814284676895729"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":[""],"metadata":{"id":"KD7OUoDnWGZz"},"execution_count":null,"outputs":[]}]}